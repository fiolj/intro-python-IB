.. _clase_02:

Clase 2: Modularizaci√≥n y tipos compuestos
===========================================


.. note::  **Escenas del cap√≠tulo anterior:**
  
  En la clase anterior preparamos la infraestructura:
  
  -  Instalamos los programas y paquetes necesarios (conda).
  -  Aprendimos como ejecutar: una consola usual, de ipython, o iniciar un
     *jupyter notebook*.
  -  Aprendimos a utilizar la consola como una calculadora
  -  Vimos algunos comandos m√°gicos y como enviar comandos al sistema
     operativo
  -  Aprendimos como obtener ayuda
  -  Aprendimos a crear ambientes virtuales.
  -  Iniciamos los primeros pasos del lenguaje
  
  Veamos un ejemplo completo de un programa (semi-trivial):
  
  .. code:: python
  
  
     # Definici√≥n de los datos
     r = 9.
     pi = 3.14159
     #
     # C√°lculos
     A = pi*r**2
     As = 4 * A
     V = 4*A*r/3
     #
     # Salida de los resultados
     print("Para un c√≠rculo de radio",r,"cm, el √°rea es",A,"cm¬≤")
     print("Para una esfera de radio",r,"cm, el √°rea es",As,"cm¬≤")
     print("Para una esfera de radio",r,"cm, el volumen es",V,"cm¬≥")
  
  En este ejemplo simple, definimos algunas variables con los datos del
  problema (``r`` y ``pi``), realizamos c√°lculos y sacamos por pantalla
  los resultados. A diferencia de otros lenguajes, python no necesita una
  estructura r√≠gida, con definici√≥n de un programa principal.
  
  Otro punto importante de este ejemplo es el uso de comentarios. El
  caracter ‚Äú#‚Äù inicia un comentario de l√≠nea, y el int√©rprete de python
  ignora todos lo que viene a continuaci√≥n hasta que encuentra una nueva
  l√≠nea.
  
  

Modularizaci√≥n y encapsulado
----------------------------

Una caracter√≠stica importante de la programaci√≥n es la posibilidad de
definir partes del c√≥digo para realizar alguna tarea espec√≠fica y poder
reutilizarla. En Python, una de las maneras m√°s efectivas de hacer esto
es mediante la definici√≥n de *funciones*. Ya vimos un ejemplo, con la
funci√≥n ``print()``, que se usa para imprimir valores a pantalla (por
defecto) o a un archivo. Existen otras funciones ya definidas en Python
(``len()``, ``max()``, ``min()``, ``abs()``, etc). Puede ver la `lista
completa en la
documentaci√≥n <https://docs.python.org/3/library/functions.html>`__.

Definici√≥n b√°sica de funciones
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tomemos el ejemplo del programa anterior para definir una funci√≥n que
calcule el √°rea de un disco

.. code:: python

    def area_disco(r):
      """C√°lculo del √°rea de un c√≠rculo de radio `r`"""
      # Definici√≥n de constantes
      pi = 3.141593
      # C√°lculo
      A = pi * r**2
      return A
    print("Termin√≥ la funci√≥n")


.. parsed-literal::

    Termin√≥ la funci√≥n


**Puntos a notar:**

-  Las funciones se definen utilizando la palabra ``def`` seguida por el
   nombre.
-  A continuaci√≥n, entre par√©ntesis se escriben los argumentos, en este
   caso el radio ``r``.
-  La funci√≥n devuelve algo; puede ser uno o m√°s valores.
-  Lo que devuelve la funci√≥n se especifica mediante la palabra
   reservada ``return`` (en este caso ``A`` que es un valor real). Si es
   m√°s de un valor, se separan con comas. Si una funci√≥n no devuelve
   algo expl√≠citamente, entonces devuelve ``None``.
-  Al principio de la definici√≥n de la funci√≥n se escribe el *string* de
   documentaci√≥n.

.. code:: python

    help(area_disco)


.. parsed-literal::

    Help on function area_disco in module __main__:
    
    area_disco(r)
        C√°lculo del √°rea de un c√≠rculo de radio `r`
    


.. code:: python

    R = 2
    Area = area_disco(R)
    print("Para un c√≠rculo de radio", R, "cm, el √°rea es",Area,"cm¬≤")


.. parsed-literal::

    Para un c√≠rculo de radio 2 cm, el √°rea es 12.566372 cm¬≤


.. code:: python

    print("Para un c√≠rculo de radio", 3, "cm, el √°rea es",area_disco(3.),"cm¬≤")


.. parsed-literal::

    Para un c√≠rculo de radio 3 cm, el √°rea es 28.274337 cm¬≤


M√≥dulos
-------

Los m√≥dulos son el mecanismo de Python para reusar c√≥digo. Existen
varios m√≥dulos que son parte de la biblioteca *standard* para distintos
tipos de aplicaciones. Adem√°s existe un repositorio en la que contribuye
la comunidad, con bibliotecas para muchos usos diversos.

El uso de m√≥dulos es muy simple, para poder aprovecharlo necesitaremos
saber dos cosas:

-  Qu√© funciones est√°n ya definidas y listas para usar
-  C√≥mo acceder a ellas

Empecemos con la segunda cuesti√≥n. Para utilizar las funciones debemos
*importarlas* en la forma ``import modulo``, donde modulo es el nombre
que queremos importar.

Esto nos lleva a la primera cuesti√≥n: c√≥mo saber ese nombre, y que
funciones est√°n disponibles. La respuesta es: **la documentaci√≥n**.

Una vez importado, podemos utilizar constantes y funciones definidas en
el m√≥dulo con la notaci√≥n ‚Äúde punto‚Äù: ``modulo.funcion()``.

M√≥dulo math
~~~~~~~~~~~

El m√≥dulo **math** contiene las funciones m√°s comunes (trigonom√©tricas,
exponenciales, logaritmos, etc) para operar sobre n√∫meros de *punto
flotante*, y algunas constantes importantes (pi, e, etc). En realidad es
una interface a la biblioteca math en C.

.. code:: python

    import math
    # algunas constantes y funciones elementales
    raiz5pi = math.sqrt(5*math.pi)
    print (raiz5pi, math.floor(raiz5pi), math.ceil(raiz5pi))
    print (math.e, math.floor(math.e), math.ceil(math.e))
    # otras funciones elementales
    print (math.log(1024,2), math.log(27,3))
    print (math.factorial(7), math.factorial(9), math.factorial(10))
    print ('Combinatorio: C(6,2):',math.factorial(6)/(math.factorial(4)*math.factorial(2)))



.. parsed-literal::

    3.963327297606011 3 4
    2.718281828459045 2 3
    10.0 3.0
    5040 362880 3628800
    Combinatorio: C(6,2): 15.0


.. code:: python

    math??



.. parsed-literal::

    [0;31mType:[0m        module
    [0;31mString form:[0m <module 'math' from '/usr/lib64/python3.13/lib-dynload/math.cpython-313-x86_64-linux-gnu.so'>
    [0;31mFile:[0m        /usr/lib64/python3.13/lib-dynload/math.cpython-313-x86_64-linux-gnu.so
    [0;31mDocstring:[0m  
    This module provides access to the mathematical functions
    defined by the C standard.


A veces, s√≥lo necesitamos unas pocas funciones de un m√≥dulo. Entonces
para abreviar la notaci√≥n combiene importar s√≥lo lo que vamos a usar,
usando la notaci√≥n:

``from xxx import yyy``

.. code:: python

    from math import sqrt, pi, log
    import math
    raiz5pi = sqrt(5*pi)
    print (log(1024, 2))
    print (raiz5pi, math.floor(raiz5pi))


.. parsed-literal::

    10.0
    3.963327297606011 3


.. code:: python

    import math as m
    m.sqrt(3.2)




.. parsed-literal::

    1.7888543819998317



.. code:: python

    import math
    print(math.sqrt(-1))


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    Cell In[11], line 2
          1 import math
    ----> 2 print(math.sqrt(-1))


    ValueError: math domain error


M√≥dulo ``cmath``
~~~~~~~~~~~~~~~~

El m√≥dulo ``math`` no est√° dise√±ado para trabajar con n√∫meros complejos,
para ello existe el m√≥dulo **cmath**

.. code:: python

    import cmath
    print('Usando cmath (-1)^0.5=', cmath.sqrt(-1))
    print(cmath.cos(cmath.pi/3 + 2j))



.. parsed-literal::

    Usando cmath (-1)^0.5= 1j
    (1.8810978455418161-3.1409532491755083j)


Si queremos calcular la fase (el √°ngulo que forma con el eje x) podemos
usar la funci√≥n phase

.. code:: python

    z = 1 + 0.5j
    cmath.phase(z)                  # Resultado en radianes




.. parsed-literal::

    0.4636476090008061



.. code:: python

    math.degrees(cmath.phase(z))    # Resultado en grados




.. parsed-literal::

    26.56505117707799



.. code:: python

    help(cmath)


.. parsed-literal::

    Help on module cmath:
    
    NAME
        cmath
    
    MODULE REFERENCE
        https://docs.python.org/3.13/library/cmath.html
    
        The following documentation is automatically generated from the Python
        source files.  It may be incomplete, incorrect or include features that
        are considered implementation detail and may vary between Python
        implementations.  When in doubt, consult the module reference at the
        location listed above.
    
    DESCRIPTION
        This module provides access to mathematical functions for complex
        numbers.
    
    FUNCTIONS
        acos(z, /)
            Return the arc cosine of z.
    
        acosh(z, /)
            Return the inverse hyperbolic cosine of z.
    
        asin(z, /)
            Return the arc sine of z.
    
        asinh(z, /)
            Return the inverse hyperbolic sine of z.
    
        atan(z, /)
            Return the arc tangent of z.
    
        atanh(z, /)
            Return the inverse hyperbolic tangent of z.
    
        cos(z, /)
            Return the cosine of z.
    
        cosh(z, /)
            Return the hyperbolic cosine of z.
    
        exp(z, /)
            Return the exponential value e**z.
    
        isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
            Determine whether two complex numbers are close in value.
    
              rel_tol
                maximum difference for being considered "close", relative to the
                magnitude of the input values
              abs_tol
                maximum difference for being considered "close", regardless of the
                magnitude of the input values
    
            Return True if a is close in value to b, and False otherwise.
    
            For the values to be considered close, the difference between them must be
            smaller than at least one of the tolerances.
    
            -inf, inf and NaN behave similarly to the IEEE 754 Standard. That is, NaN is
            not close to anything, even itself. inf and -inf are only close to themselves.
    
        isfinite(z, /)
            Return True if both the real and imaginary parts of z are finite, else False.
    
        isinf(z, /)
            Checks if the real or imaginary part of z is infinite.
    
        isnan(z, /)
            Checks if the real or imaginary part of z not a number (NaN).
    
        log(z, base=<unrepresentable>, /)
            log(z[, base]) -> the logarithm of z to the given base.
    
            If the base is not specified, returns the natural logarithm (base e) of z.
    
        log10(z, /)
            Return the base-10 logarithm of z.
    
        phase(z, /)
            Return argument, also known as the phase angle, of a complex.
    
        polar(z, /)
            Convert a complex from rectangular coordinates to polar coordinates.
    
            r is the distance from 0 and phi the phase angle.
    
        rect(r, phi, /)
            Convert from polar coordinates to rectangular coordinates.
    
        sin(z, /)
            Return the sine of z.
    
        sinh(z, /)
            Return the hyperbolic sine of z.
    
        sqrt(z, /)
            Return the square root of z.
    
        tan(z, /)
            Return the tangent of z.
    
        tanh(z, /)
            Return the hyperbolic tangent of z.
    
    DATA
        e = 2.718281828459045
        inf = inf
        infj = infj
        nan = nan
        nanj = nanj
        pi = 3.141592653589793
        tau = 6.283185307179586
    
    FILE
        /usr/lib64/python3.13/lib-dynload/cmath.cpython-313-x86_64-linux-gnu.so
    
    


--------------

Ejercicios 02 (a)
-----------------

1. Escriba funciones que calculen:

-  El volumen de una esfera
-  El volumen de una caja de lados ``L1``, ``L2``, ``L3``

2. Escriba una funci√≥n que tome como argumentos tres valores: ``a``,
   ``b``, ``c`` y calcule los ceros (ra√≠ces) del polinomio
   :math:`a x^{2}\, + b\, x + c`.

3. Considere un pol√≠gono regular de :math:`N` lados inscripto en un
   c√≠rculo de radio unidad:

   -  Escriba una funci√≥n que tome como argumento el n√∫mero de lados
      :math:`N` y calcule el √°ngulo interior del pol√≠gono regular
      correspondiente (por ejemplo el de un tri√°ngulo es 60 grados, de
      un cuadrado es 90 grados, y de un pent√°gono es 108 grados). Pruebe
      su funci√≥n para valores de :math:`N= 3, 5, 6, 8, 9, 10, 12`.
   -  ¬øPuede calcular la longitud del lado de los pol√≠gonos regulares si
      se encuentran inscriptos en un c√≠rculo de radio unidad?

En todos los casos, pruebe las funciones escritas

| .. image:: figuras/interior-angles-square.png


| .. image:: figuras/interior-angles-pentagon.png



--------------





