.. _clase_05:


==========================================
Clase 5: Más caracterícticas de Funciones
==========================================

================================

Empacar y desempacar argumentos
===============================

Cuando en **Python** creamos una función que acepta un número arbitrario
de argumentos estamos utilizando una habilidad del lenguaje que es el
“empaquetamiento” y “desempaquetamiento” automático de variables.

Al definir un número variable de argumentos de la forma:

.. code:: python

   def f(*v):
   ...

y luego utilizarla en alguna de las formas:

.. code:: python

   f(1)
   f(1,'hola')
   f(a,2,3.5, 'hola')

**Python** automáticamente convierte los argumentos en una única tupla:

.. code:: python

   f(1)                 --> v = (1,)
   f(1,'hola')          --> v = (1,'hola')
   f(a,2,3.5, 'hola')   --> v = (a,2,3.5,'hola')

Análogamente, cuando utilizamos funciones podemos desempacar múltiples
valores en los argumentos de llamada a las funciones.

Si definimos una función que recibe un número determinado de argumentos

.. code:: python

   def g(a, b, c):
   ...

y definimos una lista (o tupla)

.. code:: python

   t1 = [a1, b1, c1]

podemos realizar la llamada a la función utilizando la notación
“asterisco” o “estrella”

.. code:: python

   g(*t1)             -->  g(a1, b1, c1)

Esta notación no se puede utilizar en cualquier contexto. Por ejemplo,
es un error tratar de hacer

.. code:: python

   t2 = *t1

pero en el contexto de funciones podemos “desempacarlos” para
convertirlos en varios argumentos que acepta la función usando la
expresión con asterisco. Veamos lo que esto quiere decir con la función
``caida_libre()`` definida anteriormente

.. code:: python

    def caida_libre(t, h0, v0 = 0., g=9.8):
      """Devuelve la velocidad y la posición de una partícula en
      caída libre para condiciones iniciales dadas
    
      Parameters
      ----------
      t : float
          el tiempo al que queremos realizar el cálculo
      h0: float 
          la altura inicial
      v0: float (opcional)
          la velocidad inicial (default = 0.0)
       g: float (opcional)
          valor de la aceleración de la gravedad (default = 9.8)
    
      Returns
      -------
      (v,h):  tuple of floats
           v= v0 - g*t
           h= h0 - v0*t -g*t^2/2
      
      """
      v = v0 - g*t
      h = h0 - v0*t - g*t**2/2.
      return v,h


.. code:: python

    datos = (5.4, 1000., 0.)        # Una lista (tuple en realidad)
    # print (caida_libre(datos[0], datos[1], datos[2]))
    print (caida_libre(*datos))

En la llamada a la función, la expresión ``*datos`` le indica al
intérprete Python que la secuencia (tuple) debe convertirse en una
sucesión de argumentos, que es lo que acepta la función.

Similarmente, para desempacar un diccionario usamos la notación
``**diccionario``:

.. code:: python

    # diccionario, caída libre en la luna
    otros_datos = {'t':5.4, 'h0': 1000., "g" : 1.625} 
    v, h = caida_libre(**otros_datos)
    print ('v={}, h={}'.format(v,h))


En resumen:

-  la notación ``(*datos)`` convierte la tupla (o lista) en los tres
   argumentos que acepta la función caída libre. Los siguientes llamados
   son equivalentes:

.. code:: python

   caida_libre(*datos)
   caida_libre(datos[0], datos[1], datos[2])
   caida_libre(5.4, 1000., 0.)

-  la notación ``(**otros_datos)`` desempaca el diccionario en pares
   ``clave=valor``, siendo equivalentes los dos llamados:

.. code:: python

   caida_libre(**otros_datos)
   caida_libre(t=5.4, h0=1000., g=0.2)

Funciones que devuelven funciones
=================================

Las funciones pueden ser pasadas como argumento y pueden ser retornadas
por una función, como cualquier otro objeto (números, listas, tuples,
cadenas de caracteres, diccionarios, etc). Veamos un ejemplo simple de
funciones que devuelven una función:

.. code:: python

    def crear_potencia(n):
      "Devuelve la función x^n"
      def potencia(x):
        "potencia {}-esima de x".format(n)
        return x**n
      return potencia

.. code:: python

    f = crear_potencia(3) # f = x^3
    print(f)
    cubos = [f(j) for j in range(5)]

.. code:: python

    cubos

.. code:: python

    help(f)

.. code:: python

    help(crear_potencia)

Ejemplo: Polinomio interpolador
===============================

Veamos ahora una función que retorna una función. Supongamos que tenemos
una tabla de puntos ``(x,y)`` por los que pasan nuestros datos y
queremos interpolar los datos con un polinomio.

Sabemos que dados ``M-1`` puntos, hay un único polinomio de grado
``M-1`` que pasa por todos los puntos. En este ejemplo utilizamos la
fórmula de Lagrange para obtenerlo.

.. math::


   P(x) = \sum_{j=0}^{M-1} y_j l_j(x)

.. math::


   l_j(x) = \prod_{k=0,k \neq j}^{M-1} \frac{x-x_k}{x_j-x_k}

.. code:: python

    def polinomio_interp(x, y):
      """Devuelve el polinomio interpolador que pasa por los puntos (x_i, y_i)
    
        Warning: La implementación es numéricamente inestable. Funciona para algunos puntos (menor a 20)
    
      Keyword Arguments:
      x -- Lista con los valores de x
      y -- Lista con los valores de y
      """
    
      M = len(x)
    
      def polin(xx):
        """Evalúa el polinomio interpolador de Lagrange"""
        P = 0
    
        for j in range(M):
          pt = y[j]
          # Cálculo de l_
          for k in range(M):
            if k == j:
              continue
            fac = x[j] - x[k]
            pt *= (xx - x[k]) / fac
          P += pt
        return P
    
      return polin


Lo que obtenemos al llamar a esta función es una función

.. code:: python

    f = polinomio_interp([0,1], [0,2])

.. code:: python

    f

.. code:: python

    help(f)

.. code:: python

    f(3.4)

Este es el resultado esperado porque queremos el polinomio que pasa por
dos puntos (una recta), y en este caso es la recta :math:`y = 2x`.
Veamos cómo usarlo, en forma más general:

.. code:: python

    
    xmax = 5
    step = 0.2
    N = int(5 / step)
    
    x2, y2 = [1, 2, 3], [1, 4, 9]   # x^2
    f2 = polinomio_interp(x2, y2)
    
    x3, y3 = [0, 1, 2, 3], [0, 2, 16, 54]  # 2 x^3
    f3 = polinomio_interp(x3, y3)
    
    print('\n x   f2(x)   f3(x)\n' + 18 * '-')
    for j in range(N):
      x = step * j
      print(f'{x:.1f}  {f2(x):5.2f}  {f3(x):6.2f}')


--------------

Ejercicios 05 (a)
=================

1. Escriba una función ``crear_sen(A, w)`` que acepte dos números reales
   :math:`A, w` como argumentos y devuelva la función ``f(x)``.

Al evaluar la función ``f`` en un dado valor :math:`x` debe dar el
resultado: :math:`f(x) = A \sin(w x)` tal que se pueda utilizar de la
siguiente manera:

.. code:: python

   from math import pi
   f = crear_sen(3, 2)
   f(pi/2)    
   # Debería imprimir el resultado de 3*sin(2 * pi/2) aprox. cero

--------------

Funciones que toman como argumento una función
==============================================

.. code:: python

    def aplicar_fun(f, L):
      """Aplica la función f a cada elemento del iterable L 
      devuelve una lista con los resultados.
      
      IMPORTANTE: Notar que no se realiza ninguna comprobación de validez
      """
      return [f(x) for x in L]

   En lenguajes funcionales la función ``aplicar_fun`` se llama *map*

.. code:: python

    import math as m
    Lista = list(range(1,10))
    t = aplicar_fun(m.sin, Lista)

.. code:: python

    t

Notar que definimos la función ``aplicar_fun()`` que recibe una función
y una secuencia, pero no necesariamente una lista, por lo que podemos
aplicarla directamente a ``range``:

.. code:: python

    aplicar_fun(crear_potencia(3), range(5)) 

Además, debido a su definición, el primer argumento de la función
``aplicar_fun()`` no está restringida a funciones numéricas pero al
usarla tenemos que asegurar que la función y el iterable (lista) que
pasamos como argumentos son compatibles.

Veamos otro ejemplo:

.. code:: python

    s = ['hola', 'chau']
    print(aplicar_fun(str.upper, s))

donde ``str.upper`` es una función definida en **Python**, que convierte
a mayúsculas el string dado ``str.upper('hola') = 'HOLA'``.

Aplicacion: Ordenamiento de listas
----------------------------------

Consideremos el problema del ordenamiento de una lista de strings. Como
vemos el resultado usual no es necesariamente el deseado

.. code:: python

    s1 = ['Estudiantes', 'caballeros', 'Python', 'Curso', 'pc', 'aereo']
    print(s1)
    print(sorted(s1))

Acá ``sorted`` es una función, similar al método ``str.sort()`` que
mencionamos anteriormente, con la diferencia que devuelve una nueva
lista con los elementos ordenados. Como los elementos son *strings*, la
comparación se hace respecto a su posición en el abecedario. En este
caso no es lo mismo mayúsculas o minúsculas.

.. code:: python

    s2 = [s.lower() for s in s1]
    print(s2)
    print(sorted(s2))

Posiblemente queremos el orden que obtuvimos en segundo lugar pero con
los elementos dados originalmente (con sus mayúsculas y minúsculas
originales). Para poder modificar el modo en que se ordenan los
elementos, la función ``sorted`` (y el método ``sort``) tienen el
argumento opcional ``key`` que debe ser una función. Entonces ``sort()``
y ``sorted()`` toman una función como argumento.

.. code:: python

    sorted(s1, key=str.lower)

Como vemos, los strings están ordenados adecuadamente. Si queremos
ordenarlos por longitud de la palabra

.. code:: python

    sorted(s1, key=len)

Supongamos que queremos ordenarla alfabéticamente por la segunda letra

.. code:: python

    def segunda(a):
      return a[1]
    
    sorted(s1, key=segunda)

Funciones anónimas
==================

En ocasiones como esta suele ser más rápido (o conveniente) definir la
función, que se va a utilizar una única vez, sin darle un nombre. Estas
se llaman funciones *lambda*, y el ejemplo anterior se escribiría

.. code:: python

    sorted(s1, key=lambda a: a[1])

Si queremos ordenarla alfabéticamente empezando desde la última letra:

.. code:: python

    sorted(s1, key=lambda a: str.lower(a[::-1]))

Este es un ejemplo de uso de las funciones anónimas ``lambda``. La forma
general de las funciones ``lambda`` es:

.. code:: python

   lambda x,y,z: expresión_de(x,y,z)

por ejemplo, para calcular :math:`(n+1) x^n`, hicimos:

.. code:: python

   lambda x,n: (n+1) * x**n

Ejemplo: Integración numérica
=============================

Veamos en más detalle el caso de funciones que reciben como argumento
otra función, estudiando un caso usual: una función de integración debe
recibir como argumento al menos una función a integrar y los límites de
integración:

En este ejemplo programamos la fórmula de integración de Simpson para
obtener la integral de una función ``f(x)`` provista por el usuario, en
un dado intervalo:

.. math::


   \int _{a}^{b}f(x)\,dx\approx \frac{h}{3} \bigg[ f(x_{0}) + 2 \sum_{j=1}^{n/2} f(x_{2j}) + 4 \sum_{j=1}^{n/2} f(x_{2j-1}) - f(x_{n})\bigg]

.. code:: python

    def integrate_simps(f, a, b, N=10):
      """Calcula numéricamente la integral de la función en el intervalo dado
      utilizando la regla de Simpson
    
      Keyword Arguments:
      f -- Función a integrar
      a -- Límite inferior
      b -- Límite superior
      N -- El intervalo se separa en 2*N intervalos
      """
      h = (b - a) / (2 * N)
      I = f(a) - f(b)
      for j in range(1, N + 1):
        x2j = a + 2 * j * h
        x2jm1 = a + (2 * j - 1) * h
        I += 2 * f(x2j) + 4 * f(x2jm1)
      return I * h / 3


¿Cómo usamos la función de integración?

.. code:: python

    def potencia2(x):
      return x**2
    
    integrate_simps(potencia2, 0, 3, 7)

Acá definimos una función, y se la pasamos como argumento a la función
de integración.

Uso de funciones anónimas
-------------------------

Veamos como sería el uso de funciones anónimas en este contexto

.. code:: python

    integrate_simps(lambda x: x**2, 0, 3, 7)

La notación es un poco más corta, que es cómodo pero no muy relevante
para un caso. Si queremos, por ejemplo, aplicar el integrador a una
familia de funciones la notación se simplifica notablemente:

.. code:: python

    print('Integrales:')
    a = 0
    b = 3
    for n in range(6):
      I = integrate_simps(lambda x: (n + 1) * x**n, a, b, 10)
      print(f'I ( {n+1} x^{n}, {a}, {b} ) = {I:.5f}')


--------------

Ejercicios 05 (b)
=================

2. Escriba una serie de funciones que permitan trabajar con polinomios.
   Vamos a representar a un polinomio como una lista de números reales,
   donde cada elemento corresponde a un coeficiente que acompaña una
   potencia. En cada caso elija los argumentos que considere necesario.

   -  Una función que devuelva el orden del polinomio (un número entero)
   -  Una función que sume dos polinomios y devuelva un polinomio
      (objeto del mismo tipo)
   -  Una función que multiplique dos polinomios y devuelva el resultado
      en otro polinomio
   -  Una función devuelva la derivada del polinomio (otro polinomio).
   -  Una función que acepte el polinomio y devuelva la función
      correspondiente.

3. Escriba una función ``direccion_media(ang1, ang2, ...)`` cuyos
   argumentos son direcciones en el plano, expresadas por los ángulos en
   grados a partir de un cierto eje, y calcule la dirección promedio,
   expresada en ángulos. Pruebe su función con las listas:

   .. code:: python

      a1 = direccion_media(0, 180, 370, 10)
      a2 = direccion_media(30, 0, 80, 180)
      a3 = direccion_media(80, 180, 540, 280)

4. Las funciones de Bessel de orden :math:`n` cumplen las relaciones de
   recurrencia

   .. math::


       J_{n -1}(x)- \frac{2n }{x}\, J_{n }(x) + J_{n +1}(x) = 0 

   .. math::


      J^{2}_{0}(x) + \sum_{n=1}^{\infty} 2 J^{2}_{n}(x) = 1

   Para calcular la función de Bessel de orden :math:`N`, se empieza con
   un valor de :math:`M \gg N`, y utilizando los valores iniciales
   :math:`J_{M}=1`, :math:`J_{M+1}=0` se utiliza la primera relación
   para calcular todos los valores de :math:`n < M`. Luego, utilizando
   la segunda relación se normalizan todos los valores.

   .. note::  Estas relaciones son válidas si :math:`M \gg x` (use algún
     valor estimado, como por ejemplo :math:`M=N+20`).
  
     

   Utilice estas relaciones para calcular :math:`J_{N}(x)` para
   :math:`N=3,4,7` y :math:`x=2.5, 5.7, 10`. Para referencia se dan los
   valores esperados

   .. math::


      \begin{align}
      J_3( 2.5) =  0.21660\\
      J_4( 2.5) =  0.07378\\
      J_7( 2.5) =  0.00078\\
      J_3( 5.7) =  0.20228\\
      J_4( 5.7) =  0.38659\\
      J_7( 5.7) =  0.10270\\
      J_3(10.0) =  0.05838\\
      J_4(10.0) = -0.21960\\
      J_7(10.0) =  0.21671\\
      \end{align}

5. Dada una lista de números, vamos a calcular valores relacionados a su
   estadística.

   -  Realizar una función ``calc_media(x, que="aritmetica")`` que
      calcule los valores de la media aritmética, la media geométrica o
      la media armónica dependiendo del valor del argumento ``que``. Las
      medias están dadas por:

      .. math::


          A(x_1, \ldots, x_n) = \bar{x} = \frac{x_1 + \cdots + x_n}{n} 

      .. math::


          G(x_1, \ldots, x_n) = \sqrt[n]{x_1 \cdots x_n} 

      .. math::


          H(x_1, \ldots, x_n) = \frac{n}{\frac{1}{x_1} + \cdots + \frac{1}{x_n}}
          

   -  Realizar una función que calcule la mediana de una lista de
      números (el argumento en este caso es del tipo ``list``). La
      mediana se define como el valor para el cual la mitad de los
      valores de la lista es menor que ella. Si el número de elementos
      es par, se toma el promedio entre los dos adyacentes.

   Realizar los cálculos para las listas de números:

   .. code:: python

      L1 = [6.41, 1.28, 11.54, 5.13, 8.97, 3.84, 10.26, 14.1, 12.82, 16.67, 2.56, 17.95, 7.69, 15.39]
      L2 = [4.79, 1.59, 2.13, 4.26, 3.72, 1.06, 6.92, 3.19, 5.32, 2.66, 5.85, 6.39, 0.53]

   -  La *moda* se define como el valor que ocurre más frecuentemente en
      una colección. Note que la moda puede no ser única. En ese caso
      debe obtener todos los valores. Escriba una función que retorne la
      moda de una lista de números. Utilícela para calcular la moda de
      la siguiente lista de números enteros:

   .. code:: python

      L = [8, 9, 10, 11, 10, 6, 10, 17, 8, 8, 5, 10, 14, 7, 9, 12, 8, 17, 10, 12, 9, 11, 9, 12, 11, 11, 6, 9, 12, 5, 12, 9, 10, 16, 8, 4, 5, 8, 11, 12]

--------------

.


