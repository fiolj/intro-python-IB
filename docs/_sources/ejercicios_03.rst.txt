Ejercicios de Clase 03
----------------------


1. Manejos de listas:

   -  Cree la lista **N** de longitud 50, donde cada elemento es un
      número entero de 1 a 50 inclusive (Ayuda: vea la expresión
      ``range``).
   -  Invierta la lista.
   -  Extraiga de **N** una lista **N1** que contenga sólo aquellos
      elementos que sean el cuadrado de algún número entero.
   -  Extraiga de **N** una lista **N2** que contenga sólo aquellos
      elementos que sean iguales al :math:`n^2-n` para algún número
      entero :math:`n`.

   *Ayuda:* Puede resultar útil recordar el uso de comprensión de
   listas.

2. Cree una lista de la forma ``L = [1,3,5,...,17,19,19,17,...,3,1]``
   (*Ayuda:* vea la expresión ``range``).

3. Escriba una función que tome un número entero de tres cifras, y
   devuelva el mayor entero que se puede formar con esas cifras
   (*Ayuda:* considere convertir el número entero a otros tipos).

4. Construya una lista ``L2`` con 2000 elementos, todos iguales a
   ``0.0005``. Imprima su suma utilizando la función ``sum`` y comparar
   con el resultado que arroja la función que existe en el módulo
   ``math`` para realizar suma de números de punto flotante.

5. Operación “rara” sobre una lista:

   -  Defina la lista ``L = [0,1]``
   -  Realice la operación ``L.append(L)``
   -  Ahora imprima L, e imprima el último elemento de ``L``.
   -  Haga que una nueva lista ``L1`` tenga el valor del último elemento
      de ``L`` y repita el inciso anterior.

7.  De los primeros 100 números naturales imprimir aquellos que no son
    divisibles por ninguno de: 2, 3, 5 o 7.

8.  Usando estructuras de control, calcule el valor de la suma:

    .. math::  s_{1} = \frac{1}{2} \left(\sum_{k=1}^{100}k^{-1} \right)

    para los casos:

    1. Incluyendo todos los valores de ``k``
    2. Incluyendo únicamente los valores pares de ``k``.

9.  Escriba una función que estime la suma

    .. math:: s_{2} = \sum_{k=1}^{\infty} \frac{(-1)^{k} (k+1)}{2 k^{3} + k^{2}}

    La función toma como argumentos un error relativo :math:`\epsilon`
    deseado y devuelve el valor de la suma y el error relativo estimado.
    Pruebe su función para un valor :math:`\epsilon=10^{-5}`

10. Escriba una función que tome como argumento un párrafo de texto y
    devuelva un string con el párrafo en un “cartel” de un cierto ancho:

    .. code:: python

       cartelizar(parrafo, ancho)

    Por ejemplo, para el texto:

    .. code:: python

       s = "Ullam vel totam cum neque exercitationem ut. Quae omnis rerum sit reprehenderit accusamus. Molestiae molestiae sit totam sint. Neque pariatur temporibus ut minima accusantium. Ad perferendis natus nisi dolor. Et sint maiores exercitationem reiciendis ut ab et."

       sout = cartelizar(s, 60)

    debe devolver el *string*:

    .. code:: python

       sout = '* ******************************************************** *\n* Ullam vel totam cum neque exercitationem ut. Quae omnis  *\n*  rerum sit reprehenderit accusamus. Molestiae molestiae  *\n*   sit totam sint. Neque pariatur temporibus ut minima    *\n*  accusantium. Ad perferendis natus nisi dolor. Et sint   *\n* ******************************************************** *'

    que al imprimirlo se verá:

    .. code:: python

       print(sout)

    ::

        * ******************************************************** *
        * Ullam vel totam cum neque exercitationem ut. Quae omnis  *
        *  rerum sit reprehenderit accusamus. Molestiae molestiae  *
        *   sit totam sint. Neque pariatur temporibus ut minima    *
        *  accusantium. Ad perferendis natus nisi dolor. Et sint   *
        * ******************************************************** *

11. En 1949, D. R. Kaprekar, un matemático de la India especializado en
    matemática recreacional, describió un algoritmo que consiste en:

    1. Tomar un número de cuatro cifras
    2. Reacomodar las cifras para obtener el mayor número posible
    3. Obtener reacomodando las cifras también el menor posible
    4. Restarlos
    5. GOTO 1

    Este algoritmo tiene un “punto fijo” igual a **6174** y es al que el
    algoritmo llega si se inicia con un número que no tiene las cifras
    repetidas. Si alguna cifra es repetida el punto fijo puede ser el
    trivial, igual a cero. Escribir una función
    ``rutina_kaprekar(numero)`` que tome un número de cuatro cifras y
    devuelva el punto fijo y el número de números necesarios hasta
    alcanzarlo.

    Por ejemplo: Para el número 1392, la secuencia es:

    1392 -> 8082 -> 8532 -> 6174 -> 6174 -> …

    por lo que tendremos al aplicar la función:

    .. code:: python

          rutina_kaprekar(1392)

    ::

          6174, 4

.. hint::  Tenga en cuenta que si un número tiene menos de cuatro
     cifras debe agregarle ceros. Por ejemplo el número ``978`` debe
     entenderse como ``0978`` por lo que el mayor número que puede
     escribirse con estas cifras es ``9870``.
  
  
