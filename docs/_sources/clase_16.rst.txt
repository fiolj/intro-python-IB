.. _clase_16:


=======================================================
Clase 16: Implementación de Juego de palabras “Jumblr”
=======================================================

--------------------------------------------

El código en ``ord_palabras_corr.py`` contiene algunas funciones para
implementar un juego que consiste en elegir al azar 7 letras (que pueden
ser repetidas) y con ellas formar todas las palabras posibles.

.. code:: python

    # %load data/ord_palabras_corr.py
    #!/usr/bin/env python
    
    """
    ## Ejercicio de análisis de código
    
    Debe analizar el código, agregar comentarios, corregir los errores y completar partes del código, acorde a las instrucciones.
    """
    from pathlib import Path
    from random import sample
    
    alfabeto_counts = {'a': 12,  'e': 12,  'u': 5,  'o': 9,  'v': 1,  'ñ': 1,  'q': 1,  'g': 2,  'd': 5,
                       'y': 1,  'b': 2,  'h': 2,  'p': 2,  'c': 4,  'n': 5,  'x': 1,  'r': 5,  's': 6,
                       'l': 4,  'j': 1,  'z': 1,  'f': 1,  't': 4,  'i': 6,  'm': 2
                       }
    alfabeto = list(alfabeto_counts)
    pesos = list(alfabeto_counts)
    
    min_length = 1  # Longitud mínima de las palabras a considerar
    
    
    def selecciona_letras(cantidad=7):
      return sample(alfabeto, counts=pesos, k=cantidad)
    
    
    def my_normalize(s_in):
      """
      COMPLETAR descripción!!!
      """
      acentuadas = "áäàâéëèêíïìîóöòôúüùû"
      normalitas = "aaaaeeeeiiiioooouuuu"
      tabla = str.maketrans(acentuadas, normalitas)
      return s_in.translate(tabla)
    
    
    def process_words(filename):
      """
      COMPLETAR descripción!!!
      """
      words = {}
      with filename.open() as fi:
        for line in fi:
          w = my_normalize(line.strip())
          Lw = len(w)
          if Lw >= min_length:
            continue
    
          if Lw not in words:
            words[Lw] = [w]
          else:
            words[Lw].append(w)
    
      return words
    
    
    def buscar_palabras(palabras, letras):
      """
      COMPLETAR descripción!!!
      """
      encontradas = []
      for pal in palabras:
        if palabra_in_letras(pal, letras):
          encontradas.append(pal)
      return encontradas
    
    
    def palabra_in_letras(pal, letras):
      """
      COMPLETAR descripción!!!
      """
      fichas = letras
      for k in pal:
        if k in fichas:
          fichas.remove(k)
        else:
          return False
      else:
        return True
    
    
    def escribir_solucion(fname, letras, posibles):
      """
      COMPLETAR CÓDIGO!!!
    
      Función para escribir en el archivo la información de la solución
    
      fname: nombre del archivo
    
      letras: string con las letras que salieron sorteadas
    
      posibles: diccionario con la solución del problema
    
      Ejemplo:
      Si los argumentos son:
      fname = 'salida.txt'
      letras = 'mredfec'
      posibles = {6: ['merced'],
                  5: ['ceder', 'mecer'],
                  2: ['ce', 'cm', 'de', 'de', 'fe', 'me'],
                  3: ['efe', 'eme', 'ere', 'red'],
                  1: ['e']
                  }
    
      entonces la función deberá escribir en el archivo salida.txt el siguiente texto:
    
      Para el conjunto de letras: m, r, e, d, f, e, c:
    
      - 1 palabra de 1 letra:  e
      - 6 palabras de 2 letras:  ce, cm, de, de, fe, me
      - 4 palabras de 3 letras:  efe, eme, ere, red
      - 2 palabras de 5 letras:  ceder, mecer
      - 1 palabra de 6 letras:  merced
    
      """
      # ######################################################################
      # COMPLETAR CÓDIGO!!!
      pass
      # ######################################################################
    
    
    if __name__ == '__main__':
    
      # ######################################################################
      # COMPLETAR CÓDIGO!!!
      fname = None
      # ######################################################################
    
      palabras = process_words(fname)
      letras = selecciona_letras()
    
      posibles = {}
      for n, pal in palabras.items():
        todas = buscar_palabras(pal, letras)
        posibles[n] = todas
    
      # ######################################################################
      # COMPLETAR descripción!!!
      counter = 0
      fout = fname.with_stem(f"salida_{counter}")
      while fout.exists():
        counter += 1
        fout = fname.with_stem(f"salida_{counter}")
    
      escribir_solucion(fout, letras, posibles)


Por ejemplo, si el conjunto de letras que se elige al azar es: "m, r, e,
d, f, e, c" la solución será:

   -  1 palabra de 1 letra: e
   -  6 palabras de 2 letras: ce, cm, de, de, fe, me
   -  4 palabras de 3 letras: efe, eme, ere, red
   -  2 palabras de 5 letras: ceder, mecer
   -  1 palabra de 6 letras: merced

Sin embargo, este código contiene varios errores que deben ser
identificados y corregidos.

Tareas:
=======

1. Leer e interpretar el código, agregando todos los comentarios
   necesarios.
2. Completar las partes del código que faltan, y que están claramente
   indicadas
3. Encontrar y corregir todos los errores en el código. Asegúrese que el
   programa pueda:

   -  Leer correctamente el archivo de entrada ``palabras.words``
   -  Escribir los resultados en un archivo de salida acorde al ejemplo

4. Explicar brevemente cada error encontrado y cómo se solucionó

Ejemplos de salida:
-------------------

Para ayudarlo en las tareas proveemos de algunos resultados correctos al
ejecutar el código.

-  Ejemplo 1:

   ::

      Para el conjunto de letras: i, c, t, e, c, x, o:

      - 3 palabras de 1 letra:  o, e, o
      - 5 palabras de 2 letras:  ce, oc, te, te, ti
      - 4 palabras de 3 letras:  eco, etc, tio, tic
      - 2 palabras de 4 letras:  cito, oxte
      - 2 palabras de 5 letras:  etico, exito

-  Ejemplo 2:

   ::

      Para el conjunto de letras: a, a, c, r, i, i, f:

      - 1 palabra de 1 letra:  a
      - 3 palabras de 2 letras:  ca, fa, ir
      - 8 palabras de 3 letras:  aca, ara, cia, fia, ira, ira, ria, rai
      - 8 palabras de 4 letras:  arca, ciar, faca, fiar, frac, iria, rafa, rifa
      - 3 palabras de 5 letras:  afiar, cifra, rafia
      - 1 palabra de 6 letras:  africa

-  Ejemplo 3:

   ::

      Para el conjunto de letras: a, a, b, e, l, g, r:

      - 2 palabras de 1 letra:  a, e
      - 7 palabras de 2 letras:  el, al, be, ea, el, la, le
      - 8 palabras de 3 letras:  ala, ala, ara, bar, era, era, gel, lar
      - 14 palabras de 4 letras:  area, abar, abra, alar, alea, alga, baga, bala, brea, eral, lega, lera, raba, real
      - 23 palabras de 5 letras:  alabe, arabe, argel, albar, alear, algar, bagar, bagre, balar, balea, belga, braga, brega, erala, garla, gleba, greba, labra, lagar, legar, legra, ralea, regla
      - 9 palabras de 6 letras:  alarbe, albear, alegar, alegra, arable, balear, gabela, galera, regala
      - 2 palabras de 7 letras:  algebra, balagre

.. note::  El código a considerar ``ord_palabras_corr.py`` se
     encuentra en el directorio **data/** que renombrará de la forma usual
     ``16_Apellido.py``. El archivo con los datos **palabras.words** se
     encuentra en el mismo lugar.
  
  


