Ejercicios de Clase 06
----------------------


1. Implemente los métodos ``__add__``, ``producto`` y ``abs``

   -  ``__add__()`` debe retornar un objeto del tipo ``Vector`` y
      contener en cada componente la suma de las componentes de los dos
      vectores que toma como argumento.

   -  ``producto`` toma como argumentos dos vectores y retorna un número
      real con el valor del producto interno

   -  ``abs`` toma como argumentos el propio objeto y retorna el número
      real correspondiente

   Su uso será el siguiente:

   .. code:: python

      v1 = Vector(1,2,3)
      v2 = Vector(3,2,1)
      v = v1 + v2
      pr = v1.producto(v2)
      a = v1.abs()

2. Utilizando la definición de la clase ``Punto``

.. code:: python

   class Punto:
     "Clase para describir un punto en el espacio"

     num_puntos = 0

     def __init__(self, x=0, y=0, z=0):
       "Inicializa un punto en el espacio"
       self.x = x
       self.y = y
       self.z = z
       Punto.num_puntos += 1
       return None

     def __del__(self):
       "Borra el punto y actualiza el contador"
       Punto.num_puntos -= 1

     def __str__(self):
       return f"Punto en el espacio con coordenadas: x = {self.x}, y = {self.y}, z = {self.z}"

     def __repr__(self):
       return f"Punto(x = {self.x}, y = {self.y}, z = {self.z})"

     def __call__(self):
       return self.__str__()

     @classmethod
     def total(cls):
       "Imprime el número total de puntos"
       print(f"En total hay {cls.num_puntos} puntos definidos")

Complete la implementación de la clase ``Vector`` con los métodos
pedidos

.. code:: python

   class Vector(Punto):
     "Representa un vector en el espacio"

     def __add__(self, v2):
       "Calcula un vector que contiene la suma de dos vectores"
       print("Aún no implementada la suma de dos vectores") 
       # código calculando v = suma de self + v2
       # ...

     def __mul__(self, v2):
       "Calcula el producto interno entre dos vectores"
       print("Aún no implementado el producto interno de dos vectores") 
       # código calculando el producto interno pr = v1 . v2

     def abs(self):
       "Devuelve la distancia del punto al origen"
       print("Aún no implementado la norma del vector") 
       # código calculando la magnitud del vector

     def angulo_entre_vectores(self, v2):
       "Calcula el ángulo entre dos vectores"
       print("Aún no implementado el ángulo entre dos vectores") 
       angulo = 0
       # código calculando angulo = arccos(v1 * v2 / (|v1||v2|))
       return angulo

     def coordenadas_cilindricas(self):
       "Devuelve las coordenadas cilindricas del vector como una tupla (r, theta, z)"
       print("No implementada")

     def coordenadas_esfericas(self):
       "Devuelve las coordenadas esféricas del vector como una tupla (r, theta, phi)"
       print("No implementada")

3. **PARA ENTREGAR:** Cree una clase ``Polinomio`` para representar
   polinomios. La clase debe guardar los datos representando todos los
   coeficientes. El grado del polinomio será *menor o igual a 9* (un
   dígito).

   .. note::  Utilice el archivo **06_polinomio.py** en el directorio
     **data**, que renombrará de la forma usual ``06_Apellido.py``. Se le
     pide que programe:
  
     

-  Un método de inicialización ``__init__`` que acepte una lista de
   coeficientes. Por ejemplo para el polinomio
   :math:`4 x^3 + 3 x^2 + 2 x + 1` usaríamos:

.. code:: python

   >>> p = Polinomio([1,2,3,4])

-  Un método ``grado`` que devuelva el orden del polinomio

.. code:: python

   >>> p = Polinomio([1,2,3,4])
   >>> p.grado()
   3

-  Un método ``get_coeficientes``, que devuelva una lista con los
   coeficientes:

.. code:: python

   >>> p.get_coeficientes()
   [1, 2, 3, 4]

-  Un método ``set_coeficientes``, que fije los coeficientes de la
   lista:

.. code:: python

   >>> p1 = Polinomio()
   >>> p1.get_coeficientes()
   []
   >>> p1.set_coeficientes([1, 2, 3, 4])
   >>> p1.get_coeficientes()
   [1, 2, 3, 4]

-  El método ``suma_pol(pol2)`` que le sume otro polinomio y devuelva un
   polinomio (objeto del mismo tipo)

-  El método ``mul(pol2)`` que multiplica al polinomio por una constante
   y devuelve un nuevo polinomio

-  Un método, ``derivada(n)``, que devuelva la derivada de orden ``n``
   del polinomio (otro polinomio):

.. code:: python

   >>> p1 = p.derivada()
   >>> p1.get_coeficientes()
   [2, 6, 12]
   >>> p2 = p.derivada(n=2)
   >>> p2.get_coeficientes()
   [6, 24]

-  Un método que devuelva la integral (antiderivada) del polinomio de
   orden ``n``, con constante de integración ``cte`` (otro polinomio).

.. code:: python

   >>> p1 = p.integrada()
   >>> p1.get_coeficientes()
   [0, 1, 1, 1, 1]
   >>>
   >>> p2 = p.integrada(cte=2)
   >>> p2.get_coeficientes()
   [2, 1, 1, 1, 1]
   >>>
   >>> p3 = p.integrada(n=3, cte=1.5)
   >>> p3.get_coeficientes()
   [1.5, 1.5, 0.75, 0.16666666666666666, 0.08333333333333333, 0.05]

-  Un método ``from_string(expr)`` (pida ayuda si se le complica) que
   crea un polinomio desde un string en la forma:

.. code:: python

   >>> p = Polinomio()
   >>> p.from_string('x^5 + 3x^3 - 2 x+x^2 + 3 - x')
   >>> p.get_coeficientes()
   [3, -3, 1, 3, 0, 1]
   >>>
   >>> p1 = Polinomio()
   >>> p1.from_string('y^5 + 3y^3 - 2 y + y^2+3', var='y')
   >>> p1.get_coeficientes()
   [3, -2, 1, 3, 0, 1]

-  Escriba un método llamado ``__str__``, que devuelva un string (que
   define cómo se va a imprimir el polinomio). Un ejemplo de salida
   será:

.. code:: python

   >>> p = Polinomio([1,2.1,3,4])
   >>> print(p)
   4 x^3 + 3 x^2 + 2.1 x + 1

-  Escriba un método llamado ``__call__``, de manera tal que al llamar
   al objeto, evalúe el polinomio en un dado valor de ``x``

.. code:: python

   >>> p = Polinomio([1,2,3,4])
   >>> p(x=2)
   49
   >>>
   >>> p(0.5)
   3.25

-  Escriba un método llamado ``__add__(self, p)``, que evalúe la suma de
   polinomios usando el método ``suma_pol`` definido anteriormente. Eso
   permitirá usar la operación de suma en la forma:

.. code:: python

   >>> p1 = Polinomio([1,2,3,4])
   >>> p2 = Polinomio([1,2,3,4])
   >>> p1 + p2

-  Escriba los métodos llamados ``__mul__(self, value)`` y
   ``__rmul__(self, value)``, que devuelvan el producto de un polinomio
   por un valor constante, llamando al método ``mul`` definido
   anteriormente. Eso permitirá usar la operación producto en la forma:

.. code:: python

   >>> p1 = Polinomio([1,2,3,4])
   >>> k = 3.5
   >>> p1 * k
   >>> k * p1
