.. _clase_01:

Clase 1: Introducción al lenguaje
==================================


Cómo empezar: Instalación y uso
-------------------------------

**Python** es un lenguaje de programación interpretado, que se puede
ejecutar sobre distintos sistemas operativos, esto se conoce como
multiplataforma (suele usarse el término *cross-platform*). Además, la
mayoría de los programas que existen (y posiblemente todos los que
nosotros escribamos) pueden ejecutarse tanto en Linux como en windows y
en Mac sin realizar ningún cambio.

.. note::  Hay dos versiones activas del lenguaje Python.
  
  -  **Python2.X** (Python 2) es una versión madura, estable, y con muchas
     aplicaciones, y utilidades disponibles. No se desarrolla pero se
     corrigen los errores. Su uso ha disminuido mucho en los últimos años
     y esencialmente todo el ecosistema de bibliotecas se ha convertido a
     Python-3
  
  -  **Python3.X** (Python 3) es la versión actual. Se introdujo por
     primera vez en 2008, y produjo cambios incompatibles con Python 2.
     Por esa razón se mantienen ambas versiones y algunos de los
     desarrollos de Python 3 se *portan* a Python 2. En este momento la
     gran mayoría de las utilidades de Python 2 han sido modificadas para
     Python 3 por lo que, salvo muy contadas excepciones, no hay razones
     para seguir utilizando Python 2 en aplicaciones nuevas.
  
  

Instalación
~~~~~~~~~~~

En este curso utilizaremos **Python 3**

Para una instalación fácil de Python y los paquetes para uso científico
se pueden usar alguna de las distribuciones:

-  `Anaconda <https://www.anaconda.com/distribution>`__. (Linux,
   Windows, MacOs)
-  `Canopy <http://www.enthought.com/product/canopy/>`__. (Linux,
   Windows, MacOs)
-  `Winpython <https://winpython.github.io/>`__. (Windows)

En linux se podría instalar alguna de estas distribuciones pero puede
ser más fácil instalar directamente todo lo necesario desde los
repositorios. Por ejemplo en Ubuntu:

::

   `sudo apt-get install ipython3 ipython3-notebook spyder python3-matplotlib python3-numpy python3-scipy`

   o, en Fedora 28, en adelante:

   `sudo dnf install python3-ipython python3-notebook python3-matplotlib python3-numpy python3-scipy`

-  Editores de Texto:

   -  En windows: `Notepad++ <https://notepad-plus-plus.org>`__,
      `Jedit <http://www.jedit.org/>`__, … (no Notepad o Wordpad)

   -  En Linux: cualquier editor de texto (gedit, geany, kate, nano,
      emacs, vim, …)

   -  En Mac: TextEdit funciona, sino TextWrangler,
      `JEdit <http://www.jedit.org/>`__, …

-  Editores Multiplataforma e IDEs

   -  `spyder <https://github.com/spyder-ide/spyder/>`__. (IDE - También
      viene con Anaconda, y con Python(x,y)).
   -  `Atom <https://atom.io/>`__ Moderno editor de texto, extensible a
      través de paquetes (más de 3000).
   -  `Pycharm <https://www.jetbrains.com/pycharm/>`__. (IDE, una
      versión comercial y una libre, ambos con muchas funcionalidades)
   -  `Ninja-IDE <https://ninja-ide.org/>`__ (IDE *cross-platform*,
      libre)

Documentación y ayudas
~~~~~~~~~~~~~~~~~~~~~~

Algunas fuentes de ayuda *constante* son:

-  `La documentación oficial de Python <https://docs.python.org/3/>`__
-  En particular el `Tutorial <https://docs.python.org/3/tutorial/>`__,
   también `en español <http://docs.python.org.ar/tutorial/3/>`__ y la
   `referencia de
   bibliotecas <https://docs.python.org/3/reference/index.html>`__
-  En una terminal, puede obtener información sobre un paquete con
   ``pydoc <comando>``
-  En una consola interactiva de **Python**, mediante
   ``help(<comando>)``
-  La documentación de los paquetes:

   -  `Numpy <http://docs.scipy.org/doc/numpy/user/>`__
   -  `Matplotlib <http://matplotlib.org>`__, en particular la
      `galería <http://matplotlib.org/gallery.html>`__
   -  `Scipy <http://docs.scipy.org/doc/scipy/reference/>`__

-  Buscar “palabras clave + python” en un buscador. Es particularmente
   útil el sitio `stackoverflow <http://stackoverflow.com/>`__

Uso de Python: Interactivo o no
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Interfaces interactivas (consolas/terminales, notebooks)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Hay muchas maneras de usar el lenguaje Python. Es un lenguaje
**interpretado** e **interactivo**. Si ejecutamos la consola
(``cmd.exe`` en windows) y luego ``python``, se abrirá la consola
interactiva

.. image:: figuras/console.png



En la consola interactiva podemos escribir sentencias o pequeños bloques
de código que son ejecutados inmediatamente. Pero *la consola
interactiva* estándar no tiene tantas características de conveniencia
como otras, por ejemplo **IPython** que viene con “accesorios de
*comfort*”.

.. image:: figuras/ipython.png



La consola IPython supera a la estándar en muchos sentidos. Podemos
autocompletar (``<TAB>``), ver ayuda rápida de cualquier objeto (``?``),
etc.

Programas/scripts
^^^^^^^^^^^^^^^^^

Una forma muy común/poderosa de usar Python es en forma *no
interactiva*, escribiendo *programas* o *scripts*. Esto es, escribir
nuestro código en un archivo con extensión *.py* para luego ejecutarlo
con el intérprete. Por ejemplo, podemos crear un archivo *hello.py* (al
que se le llama *módulo*) con este contenido:

::

   print("Hola Mundo!")

Si ejecutamos ``python hello.py`` o ``ipython hello.py`` se ejecutará el
interprete Python y obtendremos el resultado esperado (impresión por
pantalla de “Hola Mundo!”, sin las comillas)

**Python** no exige un editor específico y hay muchos modos y maneras de
programar. Lo que es importante al programar en **Python** es que la
*indentación* define los bloques (definición de loops, if/else,
funciones, clases, etc). Por esa razón es importante que el tabulado no
mezcle espacios con caracteres específicos de tabulación. La manera que
recomendaría es usar siempre espacios (uno usa la tecla [TAB] pero el
editor lo traduce a un número determinado de espacios). La indentación
recomendada es de **4** espacios (pero van a notar que yo uso **2**).

Un buen editor es **Spyder** que tiene características de IDE (entorno
integrado: editor + ayuda + consola interactiva).

.. image:: figuras/spyder.png



Otro entorno integrado, que funciona muy bien, viene instalado con
**Canopy**.

.. image:: figuras/canopy-cluster.png



También Pycharm funciona muy bien

.. image:: figuras/pycharm.jpg



En todos los casos se puede ejecutar todo el código del archivo en la
consola interactiva que incluye. Alternativamente, también se puede
seleccionar **sólo** una porción del código para ejecutar.

Notebooks de Jupyter o Jupyter-Lab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Para trabajar en forma interactiva es muy útil usar los *Notebooks* de
Jupyter. El notebook es un entorno interactivo enriquecido. Podemos
crear y editar “celdas” código Python que se pueden editar y volver a
ejecutar, se pueden intercalar celdas de texto, fórmulas matemáticas, y
hacer que los gráficos se muestren inscrutados en la misma pantalla o en
ventanas separadas. Además se puede escribir texto con formato (como
este que estamos viendo) con secciones, títulos. Estos archivos se
guardan con extensión *.ipynb*, que pueden exportarse en distintos
formatos tales como html (estáticos), en formato PDF, LaTeX, o como
código python puro. (.py)







Comandos de Ipython
-------------------

Comandos de Navegación
~~~~~~~~~~~~~~~~~~~~~~

IPython conoce varios de los comandos más comunes en Linux. En la
terminal de IPython estos comandos funcionan independientemente del
sistema operativo (sí, incluso en windows). Estos se conocen con el
nombre de **comandos mágicos** y comienzan con el signo porcentaje
``%``. Para obtener una lista de los comandos usamos ``%lsmagic``:

.. code:: python

    %lsmagic




.. parsed-literal::

    Available line magics:
    %alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode
    
    Available cell magics:
    %%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile
    
    Automagic is ON, % prefix IS NOT needed for line magics.



Algunos de los comandos mágicos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Algunos de los comandos mágicos más importantes son:

-  ``%cd`` *direct* (Nos ubica en la carpeta direct)

-  ``%ls`` (muestra un listado del directorio)

-  ``%pwd`` (muestra el directorio donde estamos trabajando)

-  ``%run`` *filename* (corre un dado programa)

-  ``%hist`` (muestra la historia de comandos utilizados)

-  ``%mkdir`` *dname* (crea un directorio llamado dname)

-  Tab completion: Apretando [TAB] completa los comandos o nombres de
   archivos.

En la consola de IPython tipee ``%cd ~`` (*i.e.* “``%cd``” – “espacio” –
“tilde”, y luego presione [RETURN]. Esto nos pone en el directorio HOME
(default).

Después tipee ``%pwd`` (print working directory) y presione [RETURN]
para ver en qué directorio estamos:

.. code:: python

    %pwd




.. parsed-literal::

    '/home/fiol/Clases/IntPython/clases-python/clases'



.. code:: python

    %cd ~


.. parsed-literal::

    /home/fiol


.. code:: python

    %pwd




.. parsed-literal::

    '/home/fiol'



En windows, el comando ``pwd`` va a dar algo así como:

::

   In [3]: %pwd
   Out[3]: C:\\Users\\usuario

Vamos a crear un directorio donde guardar ahora los programas de ejemplo
que escribamos. Lo vamos a llamar ``scripts``.

Primero vamos a ir al directorio que queremos, y crearlo. En mi caso lo
voy a crear en mi HOME.

.. code:: python

    %cd 

.. code:: python

    %mkdir scripts

.. code:: python

    %cd scripts

Ahora voy a escribir una línea de **Python** en un archivo llamado
*prog1.py*. Y lo vamos a ver con el comando ``%cat``

.. code:: python

    %cat prog1.py

.. code:: python

    %run prog1.py

.. code:: python

    %hist

Hay varios otros comandos mágicos en IPython. Para leer información
sobre el sistema de comandos mágicos utilice:

.. code:: python

    %magic

Finalmente, para obtener un resumen de comandos con una explicación
breve, utilice:

.. code:: python

    %quickref

Comandos de Shell
~~~~~~~~~~~~~~~~~

Se pueden correr comandos del sistema operativo (más útil en linux)
tipeando ``!`` seguido por el comando que se quiere ejecutar. Por
ejemplo:

comandos
^^^^^^^^

.. code:: python

    !echo "1+2" >> prog1.py

.. code:: python

    !echo "print('hola otra vez')" >> prog1.py

.. code:: python

    %cat prog1.py

.. code:: python

    %run prog1.py

.. code:: python

    !date

--------------

Ejercicios 01 (a)
-----------------

1. Abra una terminal (consola) o notebook y utilícela como una
   calculadora para realizar las siguientes acciones:

   -  Suponiendo que, de las cuatro horas de clases, tomamos dos
      descansos de 15 minutos cada uno y nos distraemos otros 13
      minutos, calcular cuántos minutos efectivos de trabajo tendremos
      en las 16 clases.
   -  Para la cantidad de alumnos presentes en el aula: ¿cuántas
      horas-persona de trabajo hay involucradas en este curso?

2. Muestre en la consola de Ipython:

   -  el nombre de su directorio actual
   -  los archivos en su directorio actual
   -  Cree un subdirectorio llamado ``tmp``
   -  si está usando linux, muestre la fecha y hora
   -  Borre el subdirectorio ``tmp``

3. Para cubos de lados de longitud L = 1, 3, y 5: calcule su superficie
   y su volumen.

4. Para esferas de radios r = 1, 3, 5 y 8, calcule su superficie y su
   volumen.

5. Fíjese si alguno de los valores: :math:`x=0.49`, :math:`x=0.50`,
   :math:`x=0.51` es un cero de la función
   :math:`f(x)=x^{2} + x/2 - 1/2`.

--------------

.


Ambientes
=========

Uno de los problemas principales de cualquier proyecto de software es el
mantenimiento de las dependencias del código. Python no es ajeno a ello.
En Python las bibliotecas de software se distribuyen a través de
`paquetes <https://pypi.org/>`__. Cada paquete tiene su nombre y su
versión.

La manera tradicional de encapsular dependencias en proyectos que tiene
Python es a través de la creación de ambientes virtuales o *virtual
environments*. De esta forma, un conjunto de paquetes se instalan en
forma local en un directorio aislado de otros, en lugar de ser instalado
en forma global. De esa forma, determinados proyectos acudirán a cierto
*environment*, mientras otros usarán otros… Por ejemplo, un proyecto de
Machine Learning requerirá de ciertos paquetes de manejo de Álgebra
Lineal, optimización en GPU, etc., mientras que un server web no
necesitará de ellos.

Para manejar ambientes se usan ciertas herramientas equivalentes como:

-  `venv <https://docs.python.org/3/library/venv.html>`__
-  `virtualenv <https://packaging.python.org/en/latest/key_projects/#virtualenv>`__

La distribución Anaconda a través del comando ``conda`` también puede
administrar *environments*, y es la que usaremos en este curso.

Gestionando ambientes con ``conda``
-----------------------------------

Empecemos viendo qué ambientes tenemos en nuestro sistema con:

.. code:: shell

   conda env list

Si recién hemos instalado Python con miniconda, obtendremos:

.. code:: shell

   (base) C:\Users\Heisenberg>conda env list
   # conda environments:
   #
   base                  *  C:\Users\Heisenberg\miniconda3

Vemos que existe un ambiente default que se llama ``base``, que también
es el indicado entre paréntesis en el prompt. Este ambiente se crea al
instalar Python a través de miniconda.

   El comando ``conda`` tiene ayudas instructivas, basta agregar
   ``--help`` al final del comando

Creando ambientes
~~~~~~~~~~~~~~~~~

El comando para crear un nuevo ambiente es
``conda create -n <nombre_del_ambiente>``:

.. code:: shell

   conda create -n clases
   Channels:
    - defaults
   Platform: win-64
   Collecting package metadata (repodata.json): done
   Solving environment: done

   ## Package Plan ##

     environment location: C:\Users\Heisenberg\miniconda3\envs\clases



   Proceed ([y]/n)? y

   Preparing transaction: done
   Verifying transaction: done
   Executing transaction: done
   #
   # To activate this environment, use
   #
   #     $ conda activate clases
   #
   # To deactivate an active environment, use
   #
   #     $ conda deactivate

El resultado de la ejecución del comando nos indica cómo activar y
desactivar el ambiente. ¿Qué significa esto? Para poder trabajar
ordenadamente en un proyecto, *activamos* primero el ambiente,
instalamos los paquetes requeridos, programamos, etc. etc., y luego
*desactivamos* el ambiente. Por supuesto que la instalación de paquetes
en un ambiente se hace una única vez.

.. code:: shell

   conda activate clases

.. image:: figuras/activate.png



Nótese que el *prompt* cambia indicando bajo qué ambiente estamos
trabajando. En efecto:

.. code:: shell

   (clases) C:\Users\Heisenberg>conda env list
   # conda environments:
   #
   base                     C:\Users\Heisenberg\miniconda3
   clases                *  C:\Users\Heisenberg\miniconda3\envs\clases

Nos indica que hay un nuevo ambiente creado, y es el que está activo
(indicado por el asterisco).

Para borrar un ambiente, usamos

.. code:: shell

   conda env remove --name <nombre_del_ambiente>

..

   Recordar desactivar el ambiente antes de borrarlo. De todas formas,
   ``conda`` avisará si uno se olvida de este paso

.. code:: shell

   conda deactivate
   conda env remove --name clases



Más documentación y opciones por
`acá <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>`__.

Instalando paquetes
^^^^^^^^^^^^^^^^^^^

Por defecto ``conda create -n <nombre_del_ambiente>`` no instala ningún
paquete, con lo cual, tenemos que empezar instalando Python:

   Recordar que estamos instalando paquetes *dentro del ambiente*, así
   que hay que asegurarse que hayamos hecho
   ``conda activate <nombre_del_ambiente>``

.. code:: bash

   conda install python=3.11.4

Instalará la versión 3.11.4 de Python. La sintaxis es en general

.. code:: bash

   conda install <nombre_del_paquete_1>[=<versión>] <nombre_del_paquete_2>[=<versión>] ... 

Es optativo especificar la versión del paquete, por defecto ``conda``
usará la versión más nueva (compatible con el resto de los paquetes que
se están instalando o están instalados en el ambiente).

Ahora sí, podemos usar python

.. code:: bash

   python --version
   Python 3.11.3

Para ver qué paquetes están instalados, hacemos ``conda list``

.. image:: figuras/lista_de_paquetes.png





Ambientes y Notebooks
---------------------

Una vez que creamos un ambiente y le agregamos paquetes, nos gustaría
utilizarlo desde un jupyter notebook. Hay algunas opciones

Instalando ``jupyter``
~~~~~~~~~~~~~~~~~~~~~~

Una opción es instalar ``jupyter`` en cada ambiente, activarlo y
correrlo via ``python -m notebook`` como hicimos al comienzo en el
ambiente *base*. Si se prefiere, también se puede instalar jupyter labs
con ``conda install -c conda-forge jupyterlab`` y luego correr
``jupyter lab`` desde la terminal. En este caso tendremos un nuevo
jupyter en el menú de windows

.. image:: figuras/jupyter_ambiente.png



Instalando ``nb_conda_kernels``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Jupyter es una plataforma poderosa y permite utilizar otros *kernels*.
Un kernel de Jupyter es un proceso que corre paralelamente al notebook,
y se ocupa de la ejecución del código. Si bien lo usaremos en Python,
Jupyter puede usar otros kernels en `distintos
lenguajes <https://github.com/jupyter/jupyter/wiki/Jupyter-kernels>`__.
El paquete ``ipykernel`` es el que encapsula a IPython (la consola
interactiva) para que pueda usarse desde jupyter, y se instala como
dependencia del paquete ``jupyter``.

El paquete ``nb_conda_kernels`` permite que cualquier notebook pueda
ejecutarse con distintos ambientes (más documentación
`acá <https://github.com/anaconda/nb_conda_kernels>`__).

   Atención! ``ipykernel`` tiene que estar instalado en cada ambiente
   que se quiera utilizar con esta opción.

.. image:: figuras/kernels_en_jupyter.png



En resumen: - Si se quiere usar notebooks con un ambiente dedicado,
instalar jupyter en cada ambiente. - Si se desea usar notebooks con
distintos ambientes, instalar ``ipykernel`` en cada ambiente y
``nb_conda_kernels`` en el ambiente desde el cual se correrá jupyter (en
general, es el default *base*)

Visual Studio Code
~~~~~~~~~~~~~~~~~~

VS Code maneja esto automáticamente, instalando ``ipykernel`` en cada
ambiente de ser necesario, y realizando todas las conexiones necesarias
para que uno pueda tener disponibles todos los ambientes al abrir un
notebook.




Compartiendo ambientes
----------------------

La forma más sencilla es crear un archivo con la lista de paquetes del
ambiente local que estamos usando, compartir dicho archivo y recrear el
ambiente en la nueva locación. Extrayendo el ambiente local

.. code:: bash

   conda env export --from-history > environment.yml

Resulta en un archivo
`YAML <https://www.redhat.com/en/topics/automation/what-is-yaml#:~:text=YAML%20is%20a%20human%2Dreadable,is%20for%20data%2C%20not%20documents.>`__
de la forma:

.. code:: yaml

   name: clases
   channels:
     - defaults
   dependencies:
     - ipykernel
     - mypy
     - jupyter

Esta es la forma más general de exportar los paquetes. Obsérvese que
están incluídos aquellos paquetes que hemos instalado explícitamente con
``conda``.

   Se estila usar como nombre de archivo ``environment.yml``, pero se
   puede usar cualquier otro nombre de base,

..

   Existen otras maneras más específicas de crear archivos que contengan
   el listado de paquetes instalados, pero adolecen de algunos
   problemas, como por ejemplo, no son multiplataforma.

Una vez copiado el archivo yaml en la nueva máquina/usuario/etc.,
procedemos a crear el ambiente con

.. code:: bash

   conda env create -n clases2 --file environment.yml

donde en este caso ``environment.yml`` es el archivo que creamos antes,
y ``clases2`` sería el nombre del nuevo ambiente.
