Ejercicios de Clase 04
----------------------


1. Defina una función que dada una altura inicial ``h_0``, una velocidad
   inicial ``v_0`` y un paso de tiempo ``delta_t``, devuelva:

   -  una lista conteniendo los tiempos de cálculo,
   -  otra lista con las posiciones *h(t)* (alturas) de la partícula en
      función del tiempo.
   -  una tercer lista con las velocidades *v(t)* de la partícula en
      cada instante.

   ..

      Use las funciones definidas en la clase

2. Escriba una función ``imprime_trayectoria`` que, obviamente, imprime
   la trayectoria *h(t)* en forma clara y bella. Para esto puede
   resultarle útil la función
   ```zip`` <https://docs.python.org/3.3/library/functions.html#zip>`__.


Argumentos de las funciones
---------------------------

Ámbito de las variables en los argumentos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consideremos la siguiente función

.. code:: python

    sep = 47*'-'
    def func1(x):
      print(sep,'\nx entró a la función con el valor', x)
      print('Id adentro:',id(x))
      x = 2
      print('El nuevo valor de x es', x)
      print('Id adentro nuevo:',id(x),'\n', sep)

.. code:: python

    x = 50
    print('Id afuera antes:',id(x))
    print('Fuera de la función: Originalmente x vale',x)
    func1(x)
    print('Fuera de la función: Ahora x vale',x)  
    print('Id afuera después:',id(x))

Vemos que la variable ``x`` que utilizamos como argumento de la función
debe ser diferente a la variable ``x`` que se define fuera de la
función, ya que su valor no cambia al salir. Además usamos la función
``id()`` para obtener la identidad de la variable. Python pasa las
variables como referencia al objeto que representa a la variable. En
este caso el objeto que estamos pasando es un entero que es inmutable,
con lo cual en la función misma se crea un nuevo objeto y se reasigna la
referencia al nuevo objeto. De este modo, no se afecta al objeto
original.

Consideremos ahora la siguiente función:


.. code:: python

    def func2(x):
      print(sep,'\nx entró a la función con el valor', x)
      print('Id adentro:',id(x))
      x = [2,7]
      print('El nuevo valor de x es', x)
      print('Id adentro nuevo:',id(x),'\n', sep)

La función es muy parecida, sólo que le estamos dando a la variable
``x`` dentro de la función un nuevo valor del tipo ``lista``.

.. code:: python

    x = 50
    print('Id afuera antes:',id(x))
    print('Fuera de la función: Originalmente x vale',x)
    func2(x)
    print('Fuera de la función: Ahora x vale',x)  
    print('Id afuera después:',id(x))

.. code:: python

    x = [50]
    print('Id afuera antes:',id(x))
    print('Fuera de la función: Originalmente x vale',x)
    func2(x)
    print('Fuera de la función: Ahora x vale',x)  
    print('Id afuera después:',id(x))


¿Qué está pasando acá?

-  Cuando se realiza la llamada a la función, se le pasa una referencia
   del nombre ``x``.
-  Cuando le damos un nuevo valor dentro de la función, como en el caso
   ``x = [2, 7]``, entonces se crea una nueva variable y el nombre ``x``
   queda asociado a la nueva variable.
-  La variable original –definida fuera de la función– no cambia.

En el primer caso, como los escalares son inmutables (de la misma manera
que los strings y tuplas) no puede ser modificada. Al reasignar el
nombre siempre se crea una nueva variable (para cualquier tipo).

Consideremos estas variantes, donde el comportamiento entre tipos
mutables e inmutables son diferentes:

.. code:: python

    def func3(x):
      print(sep,'\nx entró a la función con el valor', x)
      print('Id adentro:',id(x))
      x += [2,7]
      print('El nuevo valor de x es', x)
      print('Id adentro nuevo:',id(x),'\n', sep)

.. code:: python

    x = [50]
    print('Id afuera antes:',id(x))
    print('Fuera de la función: Originalmente x vale',x)
    func3(x)
    print('Fuera de la función: Ahora x vale',x)  
    print('Id afuera después:',id(x))

En este caso, como no estamos redefiniendo la variable sino que la
estamos modificando, el nuevo valor se mantiene al terminar la ejecución
de la función. Otra variante:

.. code:: python

    def func4(x):
      print(sep,'\nx entró a la función con el valor', x)
      print('Id adentro:',id(x))
      x[0] = 2
      print('El nuevo valor de x es', x)
      print('Id adentro nuevo:',id(x),'\n', sep)

.. code:: python

    x = [50]
    print('Id afuera antes:',id(x))
    print('Fuera de la función: Originalmente x vale',x)
    func4(x)
    print('Fuera de la función: Ahora x vale',x)  
    print('Id afuera después:',id(x))

Vemos que, cuando modificamos la variable (solo es posible para tipos
mutables), asignando un valor a uno o más de sus elementos o
agregando/removiendo elementos, la copia sigue apuntando a la variable
original y el valor de la variable, definida originalmente afuera,
cambia.

Tipos mutables en argumentos opcionales
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Hay que tener cuidado cuando usamos valores por defecto con tipos que
pueden modificarse dentro de la función. Consideremos la siguiente
función:

.. code:: python

    def func2b(x1, x=[]):
      print('x entró a la función con el valor', x)
      x.append(x1)
      print('El nuevo valor de x es', x)

.. code:: python

    func2b(1)

.. code:: python

    func2b(2)

El argumento opcional ``x`` tiene como valor por defecto una lista
vacía, entonces esperaríamos que el valor de ``x`` sea igual a ``x1``, y
en este caso imprima “El nuevo valor de x es [2]”. Sin embargo, entre
llamadas mantiene el valor de ``x`` anterior. El valor por defecto se
fija en la definición y en el caso de tipos mutables puede modificarse.
