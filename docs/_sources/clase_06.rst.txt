.. _clase_06:


=======================================
Clase 6: Atrapar y administrar errores
=======================================

-----------------------------

**Python** tiene incorporado un mecanismo para atrapar errores de
distintos tipos, así como para generar errores que den información al
usuario sobre usos incorrectos del código.

En primer lugar consideremos lo que se llama un error de sintaxis. El
siguiente comando es sintácticamente correcto y el intérprete sabe como
leerlo

.. code:: python

    print("hola")


.. parsed-literal::

    hola


mientras que, si escribimos algo que no está permitido en el lenguaje

.. code:: python

    print("hola"))


::


      Cell In[2], line 1
        print("hola"))
                     ^
    SyntaxError: unmatched ')'



El intérprete detecta el error y repite la línea donde lo identifica.
Este tipo de errores debe corregirse para poder seguir con el programa.

Consideremos ahora el código siguiente, que es sintácticamente correcto
pero igualmente causa un error

.. code:: python

    a = 1
    b = 0
    z = a / b


::


    ---------------------------------------------------------------------------

    ZeroDivisionError                         Traceback (most recent call last)

    Cell In[3], line 3
          1 a = 1
          2 b = 0
    ----> 3 z = a / b


    ZeroDivisionError: division by zero


Cuando se encuentra un error, **Python** muestra el lugar en que ocurre
y de qué tipo de error se trata.

.. code:: python

    print(hola)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    Cell In[4], line 1
    ----> 1 print(hola)


    NameError: name 'hola' is not defined


Este mensaje da un tipo de error diferente. Ambos: ``ZeroDivisionError``
y ``NameError`` son tipos de errores (o excepciones). Hay una larga
lista de tipos de errores que son parte del lenguaje y puede consultarse
en la documentación de `Built-in
Exceptions <https://docs.python.org/3/library/exceptions.html#bltin-exceptions>`__.

Administración de excepciones
=============================

Cuando nuestro programa aumenta en complejidad, aumenta la posibilidad
de encontrar errores. Esto se incrementa si se tiene que interactuar con
otros usuarios o con datos externos. Consideremos el siguiente ejemplo
simple:

.. code:: python

    import math
    numeros = [i**2 for i in range(10)]
    numeros.append(-1)
    numeros.append("121")

.. code:: python

    for j in numeros:
        print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
    print("Terminé de calcular todo")


.. parsed-literal::

    La raíz cuadrada de 0 es 0.0
    La raíz cuadrada de 1 es 1.0
    La raíz cuadrada de 4 es 2.0
    La raíz cuadrada de 9 es 3.0
    La raíz cuadrada de 16 es 4.0
    La raíz cuadrada de 25 es 5.0
    La raíz cuadrada de 36 es 6.0
    La raíz cuadrada de 49 es 7.0
    La raíz cuadrada de 64 es 8.0
    La raíz cuadrada de 81 es 9.0


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    Cell In[6], line 2
          1 for j in numeros:
    ----> 2     print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
          3 print("Terminé de calcular todo")


    ValueError: math domain error


En este caso se “levanta” una excepción del tipo ``ValueError`` debido a
que el módulo ``math`` solo trabaja con números reales, y no puede
calcular la raíz cuadrada de ``-1``. En ``Python`` podemos modificar
nuestro programa para manejar este error:

.. code:: python

    for j in numeros:
        try:
            print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
        except:
            print(f"No se puede calcular la raíz cuadrada del valor {j}")
    print("Terminé de calcular todo")


.. parsed-literal::

    La raíz cuadrada de 0 es 0.0
    La raíz cuadrada de 1 es 1.0
    La raíz cuadrada de 4 es 2.0
    La raíz cuadrada de 9 es 3.0
    La raíz cuadrada de 16 es 4.0
    La raíz cuadrada de 25 es 5.0
    La raíz cuadrada de 36 es 6.0
    La raíz cuadrada de 49 es 7.0
    La raíz cuadrada de 64 es 8.0
    La raíz cuadrada de 81 es 9.0
    No se puede calcular la raíz cuadrada del valor -1
    No se puede calcular la raíz cuadrada del valor 121
    Terminé de calcular todo


Notar que en los dos casos, el mensaje de error es el mismo. Sin
embargo, los dos casos -si bien se ven similares- son diferentes. En el
caso del número entero ``-1`` no puede calcularse utilizando el módulo
``math`` pero en principio hay una respuesta. En el segundo caso, 121 no
es un número sino un *string*. Podemos distinguir cada caso. Veamos la
siguiente modificación:

.. code:: python

    for j in numeros:
        try:
            print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
        except(ValueError):
            print(f"No se puede calcular la raíz cuadrada del valor {j}")
    print("Terminé de calcular todo")


.. parsed-literal::

    La raíz cuadrada de 0 es 0.0
    La raíz cuadrada de 1 es 1.0
    La raíz cuadrada de 4 es 2.0
    La raíz cuadrada de 9 es 3.0
    La raíz cuadrada de 16 es 4.0
    La raíz cuadrada de 25 es 5.0
    La raíz cuadrada de 36 es 6.0
    La raíz cuadrada de 49 es 7.0
    La raíz cuadrada de 64 es 8.0
    La raíz cuadrada de 81 es 9.0
    No se puede calcular la raíz cuadrada del valor -1


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[8], line 3
          1 for j in numeros:
          2     try:
    ----> 3         print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
          4     except(ValueError):
          5         print(f"No se puede calcular la raíz cuadrada del valor {j}")


    TypeError: must be real number, not str


Vemos que, como esperábamos no es un problema de valor sino de tipo del
argumento. Agreguemos este caso:

.. code:: python

    for j in numeros:
        try:
            print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
        except(ValueError):
            print(f"No se puede calcular la raíz cuadrada del valor {j}")
        except(TypeError):
            print(f"No está definida la raíz cuadrada para tipos {type(j)}")        
    print("Terminé de calcular todo")


.. parsed-literal::

    La raíz cuadrada de 0 es 0.0
    La raíz cuadrada de 1 es 1.0
    La raíz cuadrada de 4 es 2.0
    La raíz cuadrada de 9 es 3.0
    La raíz cuadrada de 16 es 4.0
    La raíz cuadrada de 25 es 5.0
    La raíz cuadrada de 36 es 6.0
    La raíz cuadrada de 49 es 7.0
    La raíz cuadrada de 64 es 8.0
    La raíz cuadrada de 81 es 9.0
    No se puede calcular la raíz cuadrada del valor -1
    No está definida la raíz cuadrada para tipos <class 'str'>
    Terminé de calcular todo


.. code:: python

    for j in numeros:
        try:
            print(f"La raíz cuadrada de {j} es {math.sqrt(j)}")
        except(ValueError):
            print(f"No se puede calcular la raíz cuadrada del valor {j}")
        except(TypeError):
            print(f"No está definida la raíz cuadrada para tipos {type(j)}") 
        except:
            print(f"Otro error para {j} de tipo {type(j)}") 
    
    print("Terminé de calcular todo")


.. parsed-literal::

    La raíz cuadrada de 0 es 0.0
    La raíz cuadrada de 1 es 1.0
    La raíz cuadrada de 4 es 2.0
    La raíz cuadrada de 9 es 3.0
    La raíz cuadrada de 16 es 4.0
    La raíz cuadrada de 25 es 5.0
    La raíz cuadrada de 36 es 6.0
    La raíz cuadrada de 49 es 7.0
    La raíz cuadrada de 64 es 8.0
    La raíz cuadrada de 81 es 9.0
    No se puede calcular la raíz cuadrada del valor -1
    No está definida la raíz cuadrada para tipos <class 'str'>
    Terminé de calcular todo


En esta forma sencilla, la declaración ``try`` funciona de la siguiente
manera:

-  Primero, se ejecuta el *bloque try* (el código entre las declaración
   ``try`` y ``except``).

-  Si no ocurre ninguna excepción, el *bloque except* se saltea y
   termina la ejecución de la declaración ``try``.

-  Si ocurre una excepción durante la ejecución del *bloque try*, el
   resto del bloque se saltea. Luego, si su tipo coincide con la
   excepción nombrada luego de la palabra reservada ``except``, se
   ejecuta el *bloque except*, y la ejecución continúa luego de la
   declaración ``try``.

-  Si ocurre una excepción que no coincide con la excepción nombrada en
   el ``except``, esta se pasa a declaraciones ``try`` de más afuera; si
   no se encuentra nada que la maneje, es una *excepción no manejada*, y
   la ejecución se frena con un mensaje como los mostrados arriba.

El mecanismo es un poco más complejo, y contiene otros elementos que
permiten un control más fino que lo descripto aquí.

“Crear” excepciones
===================

Podemos forzar a que nuestro código cree una excepción usando ``raise``.
Por ejemplo:

.. code:: python

    import math
    def mi_sqrt(x):
      if x < 0:
        raise ValueError(f"x = {x}, debería ser positivo")
      return math.sqrt(x)

.. code:: python

    mi_sqrt(12)




.. parsed-literal::

    3.4641016151377544



.. code:: python

    mi_sqrt(-2)


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    Cell In[13], line 1
    ----> 1 mi_sqrt(-2)


    Cell In[11], line 4, in mi_sqrt(x)
          2 def mi_sqrt(x):
          3   if x < 0:
    ----> 4     raise ValueError(f"x = {x}, debería ser positivo")
          5   return math.sqrt(x)


    ValueError: x = -2, debería ser positivo


Vemos que así nuestra función da un error que el intérprete muestra al
usuario. En este caso porque el valor no es positivo. Un error diferente
aparece si le damos números complejos:

.. code:: python

    mi_sqrt(1+2j)


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[14], line 1
    ----> 1 mi_sqrt(1+2j)


    Cell In[11], line 3, in mi_sqrt(x)
          2 def mi_sqrt(x):
    ----> 3   if x < 0:
          4     raise ValueError(f"x = {x}, debería ser positivo")
          5   return math.sqrt(x)


    TypeError: '<' not supported between instances of 'complex' and 'int'


En este caso, el error aparece en la comparación. Corrijamos este caso:

.. code:: python

    import math
    def mi_sqrt(x):
      if not isinstance(x,(int,float)):
        raise TypeError(f"x debe ser un tipo describiendo un número real")
      if x < 0:
        raise ValueError(f"x = {x}, debería ser positivo")
      return math.sqrt(x)

.. code:: python

    mi_sqrt(1+2j)


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[16], line 1
    ----> 1 mi_sqrt(1+2j)


    Cell In[15], line 4, in mi_sqrt(x)
          2 def mi_sqrt(x):
          3   if not isinstance(x,(int,float)):
    ----> 4     raise TypeError(f"x debe ser un tipo describiendo un número real")
          5   if x < 0:
          6     raise ValueError(f"x = {x}, debería ser positivo")


    TypeError: x debe ser un tipo describiendo un número real


.. code:: python

    mi_sqrt(-2)


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    Cell In[17], line 1
    ----> 1 mi_sqrt(-2)


    Cell In[15], line 6, in mi_sqrt(x)
          4   raise TypeError(f"x debe ser un tipo describiendo un número real")
          5 if x < 0:
    ----> 6   raise ValueError(f"x = {x}, debería ser positivo")
          7 return math.sqrt(x)


    ValueError: x = -2, debería ser positivo


Esta función podemos utilizarla en nuestro código de la siguiente
manera:

.. code:: python

    try:
        mi_sqrt(-2)
    except(ValueError):
        print("Argumento negativo!!!")


.. parsed-literal::

    Argumento negativo!!!


.. code:: python

    try:
        mi_sqrt(2+2j)
    except(TypeError):
        print("Tipo incorrecto!!!")


.. parsed-literal::

    Tipo incorrecto!!!




Programación Orientada a Objetos 
=================================

Breve introducción a Programación Orientada a Objetos
-----------------------------------------------------

Vimos como escribir funciones que realizan un trabajo específico y nos
devuelven un resultado. La mayor parte de nuestros programas van a estar
diseñados con un hilo conductor principal, que utiliza una serie de
funciones para realizar el cálculo. De esta manera, el código es
altamente reusable.

Hay otras maneras de organizar el código, una de ellas es
particularmente útil cuando un conjunto de rutinas comparte un dado
conjunto de datos. En ese caso, puede ser adecuado utilizar un esquema
de programación orientada a objetos. En esta modalidad programamos
distintas entidades, donde cada una tiene un comportamiento, y
determinamos una manera de interactuar entre ellas.

Clases y Objetos
----------------

Una ``Clase`` define características que tienen los ``objetos`` de dicha
clase. En general la clase tiene: un nombre y características (campos o
atributos y métodos).

Un Objeto, en programación, puede pensarse como la representación de un
objeto real, de una dada clase. Un objeto real tiene una composición y
características, y además puede realizar un conjunto de actividades
(tiene un comportamiento). Cuando programamos, las “partes” son los
datos, y el “comportamiento” son los métodos.

Ejemplos de la vida diaria serían: Una clase *Bicicleta*, y muchos
objetos del tipo bicicleta (mi bicicleta, la suya, etc). La definición
de la clase debe contener la información de qué es una bicicleta (dos
ruedas, manubrio, etc) y luego se realizan muchas copias del tipo
bicicleta (los objetos).

Se dice que los **objetos** son instancias de una **clase**, por ejemplo
ya vimos los números enteros. Cuando definimos: ``a = 3`` estamos
diciendo que ``a`` es una instancia (objeto) de la clase ``int``.

Los objetos pueden guardar datos (en este caso ``a`` guarda el valor
``3``). Las variables que contienen los datos de los objetos se llaman
usualmente campos o atributos. Las acciones que tienen asociadas los
objetos se realizan a través de funciones internas, que se llaman
métodos.

Las clases se definen con la palabra reservada ``class``, veamos un
ejemplo simple:

.. code:: python

    class NuevaClase:
        pass

.. code:: python

    c1 = NuevaClase()

.. code:: python

    c1




.. parsed-literal::

    <__main__.NuevaClase at 0x7f37f0bd4050>



.. code:: python

    help(c1)


.. parsed-literal::

    Help on NuevaClase in module __main__ object:
    
    class NuevaClase(builtins.object)
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
    


.. code:: python

    dir(c1)




.. parsed-literal::

    ['__class__',
     '__delattr__',
     '__dict__',
     '__dir__',
     '__doc__',
     '__eq__',
     '__firstlineno__',
     '__format__',
     '__ge__',
     '__getattribute__',
     '__getstate__',
     '__gt__',
     '__hash__',
     '__init__',
     '__init_subclass__',
     '__le__',
     '__lt__',
     '__module__',
     '__ne__',
     '__new__',
     '__reduce__',
     '__reduce_ex__',
     '__repr__',
     '__setattr__',
     '__sizeof__',
     '__static_attributes__',
     '__str__',
     '__subclasshook__',
     '__weakref__']



.. code:: python

    class Punto(object):
      "Clase para describir un punto en el espacio"
    
      def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    


.. code:: python

    P1 = Punto(0.5, 0.7, 0)

.. code:: python

    P1




.. parsed-literal::

    <__main__.Punto at 0x7f37f0bd5160>



Vemos que ``P1`` es un objeto del tipo ``Punto`` que está alojado en una
dada dirección de memoria (dada por ese número largo hexadecimal). Para
referirnos a los *atributos* de ``P1`` se utiliza notación “de punto”:

.. code:: python

    P1.x, P1.z




.. parsed-literal::

    (0.5, 0)



.. code:: python

    print(P1)


.. parsed-literal::

    <__main__.Punto object at 0x7f37f0bd5160>


Como vemos, acabamos de definir una clase de tipo Punto. A continuación
definimos un *método* ``__init__`` que hace el trabajo de inicializar el
objeto.

Algunos puntos a notar:

-  La línea ``P1 = Punto(0.5, 0.5, 0)`` crea un nuevo objeto del tipo
   ``Punto``. Notar que usamos paréntesis como cuando llamamos a una
   función pero Python sabe que estamos “llamando” a una clase y creando
   un objeto.

-  El método ``__init__`` es especial y es el Constructor de objetos de
   la clase. Es llamado automáticamente al definir un nuevo objeto de
   esa clase. Por esa razón, le pasamos los dos argumentos al crear el
   objeto.

-  El primer argumento del método, ``self``, debe estar presente en la
   definición de todos los métodos pero no lo pasamos como argumento
   cuando hacemos una llamada a la función. **Python** se encarga de
   pasarlo en forma automática. Lo único relevante de este argumento es
   que es el primero para todos los métodos, el nombre ``self`` puede
   cambiarse por cualquier otro **pero, por convención, no se hace**.

.. code:: python

    P2 = Punto()


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[11], line 1
    ----> 1 P2 = Punto()


    TypeError: Punto.__init__() missing 3 required positional arguments: 'x', 'y', and 'z'


Por supuesto la creación del objeto falla si no le damos ningún
argumento porque los argumentos de ``__init__`` no son opcionales.
Modifiquemos eso y aprovechamos para definir algunos otros métodos que
pueden ser útiles:

.. code:: python

    from math import atan2, pi
    
    class Punto:
      "Clase para describir un punto en el espacio"
    
      def __init__(self, x=0, y=0, z=0):
        "Inicializa un punto en el espacio"
        self.x = x
        self.y = y
        self.z = z
        
      def angulo_azimuthal(self):
        "Devuelve el ángulo que forma con el eje x, en grados"
        return 180/pi*(atan2(self.y, self.x))

.. code:: python

    P1 = Punto(0.5, 0.5)

.. code:: python

    P1.angulo_azimuthal()




.. parsed-literal::

    45.0



.. code:: python

    P2 = Punto()

.. code:: python

    P2.x




.. parsed-literal::

    0



.. code:: python

    help(P1)


.. parsed-literal::

    Help on Punto in module __main__ object:
    
    class Punto(builtins.object)
     |  Punto(x=0, y=0, z=0)
     |
     |  Clase para describir un punto en el espacio
     |
     |  Methods defined here:
     |
     |  __init__(self, x=0, y=0, z=0)
     |      Inicializa un punto en el espacio
     |
     |  angulo_azimuthal(self)
     |      Devuelve el ángulo que forma con el eje x, en grados
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
    


El objeto ``P1`` es del tipo ``Punto`` y tiene definidos los métodos
``__init__()`` (el constructor) y el método ``angulo_azimuthal()`` que
programamos para obtener el ángulo. Además tiene el método ``__dict__``
que provee un diccionario con los datos del objeto:

.. code:: python

    P1.__dict__




.. parsed-literal::

    {'x': 0.5, 'y': 0.5, 'z': 0}



Cuando ejecutamos uno de los métodos de un objeto, es equivalente a
hacer la llamada al método de la clase, dando como primer argumento el
objeto en cuestión:

.. code:: python

    pp = Punto(0.1, "s", [1,2])

.. code:: python

    pp




.. parsed-literal::

    <__main__.Punto at 0x7f37f0b53b10>



Evidentemente, al ser Python un lenguaje de tipos dinámicos, no hay
forma de prevenir que se use la clase ``Punto`` con otros tipos de
variables que no sean números, lo cual puede tener consecuencias:

.. code:: python

    pp.angulo_azimuthal()


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[21], line 1
    ----> 1 pp.angulo_azimuthal()


    Cell In[12], line 14, in Punto.angulo_azimuthal(self)
         12 def angulo_azimuthal(self):
         13   "Devuelve el ángulo que forma con el eje x, en grados"
    ---> 14   return 180/pi*(atan2(self.y, self.x))


    TypeError: must be real number, not str


.. code:: python

    print(P1.angulo_azimuthal())
    print(Punto.angulo_azimuthal(P1))


.. parsed-literal::

    45.0
    45.0


Al hacer la llamada a un método de una “instancia de la Clase” (o un
objeto), omitimos el argumento ``self``. El lenguaje traduce nuestro
llamado: ``P1.angulo_azimuthal()`` como ``Punto.angulo_azimuthal(P1)``
ya que ``self`` se refiere al objeto que llama al método.

.. note::  Es responsabilidad de quien programa establecer las
     restricciones de los valores que se pueden asignar a los atributos de
     un objeto.
  
  

Por ejemplo, si se quiere que los valores de x, y, y z sean siempre
números reales, se puede hacer lo siguiente:

.. code:: python

    
    class Punto:
        "Clase para describir un punto en el espacio"
        
        def __init__(self, x=0, y=0, z=0):
            "Inicializa un punto en el espacio"
            if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):
                raise TypeError("x, y, z deben ser números enteros o flotantes")
            self.x = x
            self.y = y
            self.z = z
            
        def angulo_azimuthal(self):
            "Devuelve el ángulo que forma con el eje x, en grados"
            return 180/pi*(atan2(self.y, self.x))

Acá usamos la función ``isinstance`` para chequear que la variable ``x``
(que a su vez es un objeto) sea de alguna de las clases ``int`` o
``float``.

.. code:: python

    pv = Punto(0.1, "s", [1,2])


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Cell In[26], line 1
    ----> 1 pv = Punto(0.1, "s", [1,2])


    Cell In[23], line 7, in Punto.__init__(self, x, y, z)
          5 "Inicializa un punto en el espacio"
          6 if not (isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))):
    ----> 7     raise TypeError("x, y, z deben ser números enteros o flotantes")
          8 self.x = x
          9 self.y = y


    TypeError: x, y, z deben ser números enteros o flotantes


Métodos especiales
~~~~~~~~~~~~~~~~~~

Volviendo a mirar la definición de la clase, vemos que ``__init__()`` es
un método “especial”. No necesitamos ejecutarlo explícitamente ya que
Python lo hace automáticamente al crear cada objeto de la clase dada. En
*Python* el usuario/programador tiene acceso a todos los métodos y
atributos. Por convención los nombres que inician con guión bajo se
presupone que no son para ser utilizados directamente. En particular,
los que están rodeados por dos guiones bajos tienen significado especial
y *Python* los va a utilizar en forma autómatica en distintas ocasiones.

Herencia
--------

Una de las características de la programación orientada a objetos es la
facilidad de reutilización de código. Uno de los mecanismos más
importantes es a través de la herencia. Cuando definimos una nueva
clase, podemos crearla a partir de un objeto que ya exista. Por ejemplo,
utilizando la clase ``Punto`` podemos definir una nueva clase para
describir un vector en el espacio:

.. code:: python

    class Vector(Punto):
      "Representa un vector en el espacio"
    
      def suma(self, v2):
        "Calcula un vector que contiene la suma de dos vectores"
        print("Aún no implementada la suma de dos vectores") 
        # código calculando v = suma de self + v2
        # ...
    
      def producto(self, v2):
        "Calcula el producto interno entre dos vectores"
        print("Aún no implementado el producto interno de dos vectores") 
        # código calculando el producto interno pr = v1 . v2
    
      def norma(self):
        "Devuelve la distancia del punto al origen"
        print("Aún no implementado la norma del vector") 
        # código calculando el producto interno pr = v1 . v2
    
        

Acá hemos definido un nuevo tipo de objeto, llamado ``Vector`` que se
deriva de la clase ``Punto``. Veamos cómo funciona:

.. code:: python

    v1 = Vector(2,3.1)
    v2 = Vector()

.. code:: python

    v1




.. parsed-literal::

    <__main__.Vector at 0x7f37f0bd67b0>



.. code:: python

    v1.x, v1.y, v1.z




.. parsed-literal::

    (2, 3.1, 0)



.. code:: python

    v2.x, v2.y, v2.z




.. parsed-literal::

    (0, 0, 0)



.. code:: python

    v1.angulo_azimuthal()




.. parsed-literal::

    57.171458208587474



.. code:: python

    v = v1.suma(v2)


.. parsed-literal::

    Aún no implementada la suma de dos vectores


.. code:: python

    print(v)


.. parsed-literal::

    None


Los métodos que habíamos definido para los puntos del espacio, son
accesibles para el nuevo objeto. Además podemos agregar (extender) el
nuevo objeto con otros atributos y métodos.

Como vemos, aún no está implementado el cálculo de las distintas
funciones, eso forma parte del siguiente …

--------------

Ejercicios 06 (a)
=================

1. Implemente los métodos ``suma``, ``producto`` y ``norma``

   -  ``suma`` debe retornar un objeto del tipo ``Vector`` y contener en
      cada componente la suma de las componentes de los dos vectores que
      toma como argumento.

   -  ``producto`` toma como argumentos dos vectores y retorna un número
      real con el valor del producto interno

   -  ``norma`` toma como argumentos el propio objeto y retorna el
      número real correspondiente:

      .. math::  \sqrt{x^2 + y^2 + z^2} 

   Su uso será el siguiente:

   .. code:: python

      v1 = Vector(1,2,3)
      v2 = Vector(3,2,1)
      vs1 = v1.suma(v2) 
      vs2 = v2.suma(v1)
      print(vs1 == vs2)  # Debería ser True
      pr = v1.producto(v2)
      a = v1.norma()

--------------
