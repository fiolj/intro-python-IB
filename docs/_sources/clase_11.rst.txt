.. _clase_11:


=========================
Clase 11: Visualización 
=========================

==============

Para graficar datos y funciones vamos a usar la biblioteca
**Matplotlib**. Vamos a empezar discutiendo algunas de las
características más generales del trabajo con esta biblioteca y mostrar
algún ejemplo relativamente sencillo. Matplotlib está dividido en tres
partes o capas conceptualmente bien delimitadas:

-  Una parte es la que hace el trabajo más básico creando y
   administrando cada objeto que forma parte del gráfico (líneas, texto,
   figuras, etc) así como sus relaciones,
-  Una segunda parte que permite un uso simple de las funciones
   anteriores: una interfaz con el usuario. Un ejemplo es el submódulo
   **pyplot**.
-  Una tercera componente que se encarga de presentar la figura en el
   formato adecuado. Esto es lo que se llama el *Backend* y se encarga
   de mostrar la figura en los distintos sistemas de ventanas, o en
   formatos de archivos correspondientes. Algunos ejemplos de *backend*
   son: PS (copias PostScript®), SVG (Scalable Vector Graphics), Agg
   (salida PNG de muy buena calidad), Cairo (png, pdf, ps, svg), GTK
   (interactivo, permite integrar matplotlib con aplicaciones Gtk+, que
   usa GNOME), PDF, WxWidgets (interactivo), Qt (interactivo).

Nosotros vamos a concentrarnos principalmente en aprender a utilizar
**pyplot**

.. code:: python

    import numpy as np
    import matplotlib.pyplot as plt
    from pathlib import Path

Interactividad
==============

Trabajo con ventanas emergentes
-------------------------------

Podemos trabajar en forma interactiva con gráficos desde una terminal de
``Ipython``

.. code:: python

     import matplotlib.pyplot as plt # o equivalentemente:
     # from matplotlib import pyplot as plt
     plt.plot([0,1,4,9,16,25])

El comando (la función) ``plot()`` crea el gráfico pero no lo muestra.
Lo hacemos explícitamente con el comando ``show()``

.. code:: python

     plt.show()

Vemos que es muy simple graficar datos.

Algunas cosas a notar:

1. Se abre una ventana
2. Se bloquea la terminal (no podemos dar nuevos comandos)
3. Si pasamos el *mouse* sobre el gráfico nos muestra las coordenadas.
4. Además del gráfico hay una barra de herramientas: .. image:: figuras/matplotlib_toolbar.png

 De derecha
   a izquierda tenemos:

-  **Grabar:** Este botón abre una ventana para guardar el gráfico en
   alguno de los formatos disponibles.

-  **Configuración de subplots:** Permite modificar el tamaño y posición
   de cada gráfico en la ventana.

-  **Agrandar (zoom) a rectángulo:**

   -  Si elegimos una región mientras apretamos el botón **izquierdo**,
      esta será la nueva región visible ocupando toda la ventana.
   -  Si elegimos una región mientras apretamos el botón **derecho**,
      pone toda la vista actual en esta región.

-  **Desplazar y agrandar (Pan and zoom):** Este botón cumple dos
   funciones diferentes:

   -  Con el botón izquierdo desplaza la vista.
   -  Con el botón derecho la vista se agrandará achicará en los ejes
      horizontal y vertical en una cantidad proporcional al movimiento.

   Si se oprime las teclas ``x`` o ``y`` las dos funciones quedan
   restringidas al eje correspondiente.

-  **Home, Back, Forward** son botones que nos llevan a la vista
   original, una vista hacia atrás o hacia adelante respectivamente



Si ocurre, como en este caso, que proveemos sólo una lista de datos, la
función ``plot()`` la interpreta como los valores correspondientes al
eje vertical (eje y), y toma el índice del dato para la variable
independiente (eje x). Si queremos dar valores explícitamente para el
eje x debemos pasarlos como primer argumento.

.. code:: python

   plt.plot([0,1,2,3,4,5],[0,1,4,9,16,25])
   plt.show()

Como vemos, para que muestre la ventana debemos hacer un llamado
explícito a la función ``show()``. Esto es así porque muchas veces
queremos realizar más de una operación sobre un gráfico antes de
mostrarlo. Sin embargo, hay varias alternativas respecto a la
interactividad de matplotlib (e ipython) que permiten adecuarla a
nuestro flujo de trabajo. La manera más común en una terminal es
utilizando las función ``ion()`` (**i**\ nteractive **on**) para hacerlo
interactivo y la función ``ioff()`` para no interactivo.

.. code:: python

   plt.ion()           # Prendemos el modo interactivo
   plt.plot([0,1,2,3,4,5],[0,1,4,9,16,25])

En el modo interactivo no sólo ``plot()`` tiene implícito el comando
``show()`` sino que podemos seguir ingresando comandos con el gráfico
abierto.

Trabajo sobre notebooks
-----------------------

Para trabajar en *ipython notebooks* suele ser conveniente realizar los
gráficos dentro de la misma página donde realizamos los cálculos

.. code:: python

    import matplotlib.pyplot as plt
    plt.plot([1,2,3,4,5,6],[0,1,4,9,16,25])




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e86e2fd0>]




.. image:: figuras/11_1_intro_visualizacion_11_1.png


En la práctica vamos a usar siempre **Matplotlib** junto con **Numpy**.

.. code:: python

    fdatos = Path().cwd() / 'data/ej_oscil_aten_err.dat'

Gráficos simples
================

El paquete *Matplotlib* permite visualizar datos guardados en un archivo
con unas pocas líneas

.. code:: python

    x, y, yexp = np.loadtxt(fdatos, unpack=True)
    plt.plot(x, y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e844ed50>]




.. image:: figuras/11_1_intro_visualizacion_16_1.png


Como vemos, es la curva que graficamos la clase anterior.

Si miramos el archivo vamos a ver que tiene una columna más que
corresponde a los valores medidos. En consecuencia le asignamos esta
tercera columna a una variable adicional ``yexp`` al leerlo.

.. code:: python

    # Graficamos las segunda y tercera columnas como función de la primera
    plt.plot(x,yexp, x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e84c5310>,
     <matplotlib.lines.Line2D at 0x7fc0e84c5450>]




.. image:: figuras/11_1_intro_visualizacion_18_1.png


Formato de las curvas
=====================

En los gráficos anteriores usamos la función ``plot()`` en sus formas
más simples.

.. code:: python

   plot(y)
   plot(x,y)
   plot(x1,y1, x2, y2)

dando a la función ``plot()`` la información mínima necesaria para
graficar los datos. Usualmente queremos poder elegir cómo vamos a
graficar nuestros datos.

Líneas, símbolos y colores
--------------------------

La forma más simple de elegir el modo de graficación de la curva es a
través de un tercer argumento. Este argumento, que aparece
inmediatamente después de los datos (x e y), permite controlar el tipo
de línea o símbolo utilizado en la graficación. En el caso de la línea
sólida se puede especificar con un guión (‘-’) o simplemente no poner
nada, ya que línea sólida es el símbolo por defecto. Las dos
especificaciones anteriores son equivalentes. También se puede elegir el
color, o el símbolo a utilizar con este argumento:

.. code:: python

   plot(x,y,'g-')
   plot(x,y,'ro')
   plot(x,y,'r-o')

.. image:: figuras/simple_linea_simb.png



Para obtener círculos usamos una especificación que corresponde a ‘o’.
Además podemos poner en este argumento el color. En este caso elegimos
graficar en color “rojo (r), con una línea (-) + círculos (o)”.

Con esta idea modificamos el gráfico anterior



.. code:: python

    plt.plot(x,y,'-', x,yexp, 'ro')




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e855c190>,
     <matplotlib.lines.Line2D at 0x7fc0e855c2d0>]




.. image:: figuras/11_1_intro_visualizacion_21_1.png


Para graficar más de una curva, en este formato simple, podemos ponerlo
todo en la misma función ``plot()`` en la forma
``plot(x1, y1, [formato], x2, y2, [formato2])`` pero muchas veces es más
legible separar los llamados a la función, una para cada curva.

.. code:: python

    plt.plot(x,y, '-')
    plt.plot(x,yexp, 'or')




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e85f7110>]




.. image:: figuras/11_1_intro_visualizacion_23_1.png


Al separar los llamados a la función ``plot()`` obtenemos un código más
claro, principalmente cuando agregamos opciones de formato.

Los siguientes caracteres pueden utilizarse para controlar el símbolo de
graficación:

+----------+-----------------------+----------+-----------------------+
| Símbolo  | Descripción           | Símbolo  | Descripción           |
+==========+=======================+==========+=======================+
| ‘-’      | solid line style      | ‘1’      | tri down marker       |
+----------+-----------------------+----------+-----------------------+
| ‘–’      | dashed line style     | ‘2’      | tri up marker         |
+----------+-----------------------+----------+-----------------------+
| ‘-.’     | dash-dot line style   | ‘3’      | tri left marker       |
+----------+-----------------------+----------+-----------------------+
| ‘:’      | dotted line style     | ‘4’      | tri right marker      |
+----------+-----------------------+----------+-----------------------+
| ‘.’      | point marker          | ‘s’      | square marker         |
+----------+-----------------------+----------+-----------------------+
| ‘,’      | pixel marker          | ‘p’      | pentagon marker       |
+----------+-----------------------+----------+-----------------------+
| ‘o’      | circle marker         | ‘\*’     | star marker           |
+----------+-----------------------+----------+-----------------------+
| ‘v’      | triangle down marker  | ‘h’      | hexagon1 marker       |
+----------+-----------------------+----------+-----------------------+
| ‘^’      | triangle up marker    | ‘H’      | hexagon2 marker       |
+----------+-----------------------+----------+-----------------------+
| ‘<’      | triangle left marker  | ‘+’      | plus marker           |
+----------+-----------------------+----------+-----------------------+
| ‘>’      | triangle right marker | ‘x’      | x marker              |
+----------+-----------------------+----------+-----------------------+
| ‘\|’     | vline marker          | ‘D’      | diamond marker        |
+----------+-----------------------+----------+-----------------------+
| ‘\_’     | hline marker          | ‘d’      | thin diamond marker   |
+----------+-----------------------+----------+-----------------------+

Los colores también pueden elegirse usando los siguientes caracteres:

===== =======
Letra Color
===== =======
‘b’   blue
‘g’   green
‘r’   red
‘c’   cyan
‘m’   magenta
‘y’   yellow
‘k’   black
‘w’   white
===== =======

Por ejemplo, utilizando:

.. code:: python

   plt.plot(x, y1, 'gs', x, y2, '-k^', x, y3, '--r' )

obtenemos: .. image:: figuras/simple_varios.png





La función ``plot()`` acepta un número variable de argumentos. Veamos lo
que dice la documentación

.. code:: python


   Signature: plt.plot(*args, **kwargs)
   Docstring:
   Plot y versus x as lines and/or markers.

   Call signatures::

       plot([x], y, [fmt], data=None, **kwargs)
       plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)

En particular, podemos usar los argumentos *keywords* (pares
nombre-valor) para cambiar el modo en que se grafican los datos. Algunos
de los más comunes son:

=============== ============================
Argumento       Valor
=============== ============================
linestyle       {‘-’, ‘–’, ‘-.’, ‘:’, ’’, …}
linewidth       número real
color           un color
marker          {‘o’, ‘s’, ‘d’, ….}
markersize      número real
markeredgecolor color
markerfacecolor color
markevery       número entero
=============== ============================

.. code:: python

    plt.plot(x,y,linewidth=1)
    plt.plot(x,yexp, 'o', color='red', markersize=2)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e834df90>]




.. image:: figuras/11_1_intro_visualizacion_27_1.png


.. code:: python

    plt.plot(x,y,linewidth=5)
    plt.plot(x,yexp, 'o', color='green', markersize=8)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e81e0e10>]




.. image:: figuras/11_1_intro_visualizacion_28_1.png


.. code:: python

    plt.plot(x,y,linewidth=5, linestyle='dashed')
    plt.plot(x,yexp, 'o', color='red', markersize=8, markeredgecolor='black',markevery=6)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fc0e8243c50>]




.. image:: figuras/11_1_intro_visualizacion_29_1.png


--------------

Ejercicios 11 (a)
=================

1. Realizar un programa para visualizar la función

   .. math::  f(x,n,w) = x^n |\sin(w x)| 

   El programa debe realizar el gráfico para :math:`w=10`, con cuatro
   curvas para :math:`n=1,2,3,4`, similar al que se muestra en la
   siguiente figura

   .. image:: figuras/ejerc_vis_f1.png



--------------






Adecuación de los gráficos
==========================

Veamos un ejemplo de un gráfico completo, con modificaciones para que
sea más útil/atractivo …

.. code:: python

    import numpy as np
    import matplotlib.pyplot as plt
    from pathlib import Path

.. code:: python

    fdatos = Path().cwd() / 'data/ej_oscil_aten_err.dat'
    foname = fdatos.with_name('ej_plot_osc')

.. code:: python

    print(fdatos)



.. parsed-literal::

    /home/fiol/Clases/IntPython/clases-python/clases/data/ej_oscil_aten_err.dat


.. code:: python

    print(foname)


.. parsed-literal::

    /home/fiol/Clases/IntPython/clases-python/clases/data/ej_plot_osc


.. code:: python

    x, y, yexp = np.loadtxt(fdatos, unpack=True)

.. code:: python

    plt.plot(x,1+y, '-b', label="teoría")
    plt.plot(x,1+yexp, 'or', label="medición")
    plt.legend(loc="best", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.yscale('log')
    plt.ylim((0.6, 1.4))
    plt.savefig(foname.with_suffix('.png'))
    plt.savefig(foname.with_suffix('.pdf'))



.. image:: figuras/11_2_mas_visualizacion_6_0.png


Nombres de ejes y leyendas
--------------------------

Vamos ahora a agregar nombres a los ejes y a las curvas.

Para agregar nombres a las curvas, tenemos que agregar un ``label``, en
este caso en el mismo comando ``plot()``, y luego mostrarlo con
\`legend()

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    #plt.legend()
    plt.legend(loc="lower right", title="Mis datos")




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fe35adb8190>




.. image:: figuras/11_2_mas_visualizacion_8_1.png


Para agregar nombres a los ejes usamos ``xlabel`` y ``ylabel``:

.. code:: python

    plt.plot(x,yexp, 'or', label="medición")
    plt.plot(x,y, '-b', label="teoría")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)");



.. image:: figuras/11_2_mas_visualizacion_10_0.png


Los títulos a la figura se pueden agregar con ``title``

Acá además agregamos una línea vertical y una horizontal.

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')




.. parsed-literal::

    <matplotlib.lines.Line2D at 0x7fe35ad06990>




.. image:: figuras/11_2_mas_visualizacion_13_1.png


Límites de graficación (vista)
------------------------------

Para cambiar los límites de graficación se puede usar las funciones
``xlim`` para el eje horizontal y ``ylim`` para el vertical

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((0,2.5))
    plt.ylim((-0.4, 0.32))




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/11_2_mas_visualizacion_15_1.png


Escalas
-------

Para pasar a escala logarítmica usamos ``xscale`` o ``yscale``

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="best", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.ylim((-0.4, 0.32))




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/11_2_mas_visualizacion_18_1.png


Líneas verticales y horizontales
--------------------------------

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="best", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.grid(which='both')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.ylim((-0.4, 0.32))




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/11_2_mas_visualizacion_20_1.png


Inclusión de ecuaciones
-----------------------

Para incluir ecuaciones se puede utilizar la notación de LaTeX para
parte del texto. Si utilizamos una expresión encerrada entre los
símbolos ``$``, matplotlib interpreta que está escrito en (un
subconjunto) de LaTeX.

**Matplotlib** tiene un procesador de símbolos interno para mostrar la
notación en LaTeX que reconoce los elementos más comunes, o puede
elegirse utilizar un procesador LaTeX externo.

.. code:: python

    plt.plot(x,y, '-b', label=r"$\frac{\sin(x^2)}{[2 + \cos (x)]^2}$")
    plt.plot(x,yexp, 'or', label="$\mathrm{Medición}$")
    plt.legend(loc="best", title="Mis datos", fontsize='x-large')
    plt.xlabel(r'Tiempo ($\mu$-segundos)', fontsize='x-large')
    plt.ylabel("Voltaje (mV)", fontsize='x-large')
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.grid(which='both')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.ylim((-0.4, 0.32))


.. parsed-literal::

    <>:2: SyntaxWarning: invalid escape sequence '\m'
    <>:2: SyntaxWarning: invalid escape sequence '\m'
    /tmp/ipykernel_6610/3688865428.py:2: SyntaxWarning: invalid escape sequence '\m'
      plt.plot(x,yexp, 'or', label="$\mathrm{Medición}$")




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/11_2_mas_visualizacion_22_2.png


Exportar las figuras
--------------------

Para guardar las figuras en alguno de los formatos disponibles
utilizamos la función ``savefig()``.

.. code:: python

    plt.plot(x,y, '-b', label=r"$\frac{\sin(x^2)}{[2 + \cos (x)]^2}$")
    plt.plot(x,yexp, 'or', label=r"$\mathrm{Medición}$")
    plt.legend(loc="best", title="Mis datos", fontsize='x-large')
    plt.xlabel(r'Tiempo ($\mu$-segundos)', fontsize='x-large')
    plt.ylabel("Voltaje (mV)", fontsize='x-large')
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.grid(which='both')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.ylim((-0.4, 0.32))
    plt.savefig(foname.with_suffix('.png'))
    plt.savefig(foname.with_suffix('.pdf'))



.. image:: figuras/11_2_mas_visualizacion_24_0.png


.. code:: python

    print(foname)


.. parsed-literal::

    /home/fiol/Clases/IntPython/clases-python/clases/data/ej_plot_osc


.. code:: python

    print(foname.with_suffix('.png'))


.. parsed-literal::

    /home/fiol/Clases/IntPython/clases-python/clases/data/ej_plot_osc.png


.. code:: python

    plt.savefig?



.. parsed-literal::

    [0;31mSignature:[0m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m [0;34m->[0m [0;34m'None'[0m[0;34m[0m[0;34m[0m[0m
    [0;31mDocstring:[0m
    Save the current figure as an image or vector graphic to a file.
    
    Call signature::
    
      savefig(fname, *, transparent=None, dpi='figure', format=None,
              metadata=None, bbox_inches=None, pad_inches=0.1,
              facecolor='auto', edgecolor='auto', backend=None,
              **kwargs
             )
    
    The available output formats depend on the backend being used.
    
    Parameters
    ----------
    fname : str or path-like or binary file-like
        A path, or a Python file-like object, or
        possibly some backend-dependent object such as
        `matplotlib.backends.backend_pdf.PdfPages`.
    
        If *format* is set, it determines the output format, and the file
        is saved as *fname*.  Note that *fname* is used verbatim, and there
        is no attempt to make the extension, if any, of *fname* match
        *format*, and no extension is appended.
    
        If *format* is not set, then the format is inferred from the
        extension of *fname*, if there is one.  If *format* is not
        set and *fname* has no extension, then the file is saved with
        :rc:`savefig.format` and the appropriate extension is appended to
        *fname*.
    
    Other Parameters
    ----------------
    transparent : bool, default: :rc:`savefig.transparent`
        If *True*, the Axes patches will all be transparent; the
        Figure patch will also be transparent unless *facecolor*
        and/or *edgecolor* are specified via kwargs.
    
        If *False* has no effect and the color of the Axes and
        Figure patches are unchanged (unless the Figure patch
        is specified via the *facecolor* and/or *edgecolor* keyword
        arguments in which case those colors are used).
    
        The transparency of these patches will be restored to their
        original values upon exit of this function.
    
        This is useful, for example, for displaying
        a plot on top of a colored background on a web page.
    
    dpi : float or 'figure', default: :rc:`savefig.dpi`
        The resolution in dots per inch.  If 'figure', use the figure's
        dpi value.
    
    format : str
        The file format, e.g. 'png', 'pdf', 'svg', ... The behavior when
        this is unset is documented under *fname*.
    
    metadata : dict, optional
        Key/value pairs to store in the image metadata. The supported keys
        and defaults depend on the image format and backend:
    
        - 'png' with Agg backend: See the parameter ``metadata`` of
          `~.FigureCanvasAgg.print_png`.
        - 'pdf' with pdf backend: See the parameter ``metadata`` of
          `~.backend_pdf.PdfPages`.
        - 'svg' with svg backend: See the parameter ``metadata`` of
          `~.FigureCanvasSVG.print_svg`.
        - 'eps' and 'ps' with PS backend: Only 'Creator' is supported.
    
        Not supported for 'pgf', 'raw', and 'rgba' as those formats do not support
        embedding metadata.
        Does not currently support 'jpg', 'tiff', or 'webp', but may include
        embedding EXIF metadata in the future.
    
    bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`
        Bounding box in inches: only the given portion of the figure is
        saved.  If 'tight', try to figure out the tight bbox of the figure.
    
    pad_inches : float or 'layout', default: :rc:`savefig.pad_inches`
        Amount of padding in inches around the figure when bbox_inches is
        'tight'. If 'layout' use the padding from the constrained or
        compressed layout engine; ignored if one of those engines is not in
        use.
    
    facecolor : :mpltype:`color` or 'auto', default: :rc:`savefig.facecolor`
        The facecolor of the figure.  If 'auto', use the current figure
        facecolor.
    
    edgecolor : :mpltype:`color` or 'auto', default: :rc:`savefig.edgecolor`
        The edgecolor of the figure.  If 'auto', use the current figure
        edgecolor.
    
    backend : str, optional
        Use a non-default backend to render the file, e.g. to render a
        png file with the "cairo" backend rather than the default "agg",
        or a pdf file with the "pgf" backend rather than the default
        "pdf".  Note that the default backend is normally sufficient.  See
        :ref:`the-builtin-backends` for a list of valid backends for each
        file format.  Custom backends can be referenced as "module://...".
    
    orientation : {'landscape', 'portrait'}
        Currently only supported by the postscript backend.
    
    papertype : str
        One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
        'a10', 'b0' through 'b10'. Only supported for postscript
        output.
    
    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
        A list of extra artists that will be considered when the
        tight bbox is calculated.
    
    pil_kwargs : dict, optional
        Additional keyword arguments that are passed to
        `PIL.Image.Image.save` when saving the figure.
    
    Notes
    -----
    
    .. note::
    
        This is the :ref:`pyplot wrapper <pyplot_interface>` for `.Figure.savefig`.
    [0;31mFile:[0m      /usr/lib64/python3.13/site-packages/matplotlib/pyplot.py
    [0;31mType:[0m      function


Dos gráficos en la misma figura
===============================

Hay varias funciones que permiten poner más de un gráfico en la misma
figura. Veamos un ejemplo utilizando la función ``subplots()``

.. code:: python

    # %load scripts/ejemplo_08_5.py
    #! /usr/bin/ipython3
    
    """ Script realizado durante la clase 9. Dos figuras """
    from pathlib import Path
    
    import numpy as np
    import matplotlib.pyplot as plt
    plt.ion()
    
    #fname = 'ej_oscil_aten_err'
    # Levantamos los datos
    #pardir = Path("..")
    
    #datfile = pardir / f'data/{fname}.dat'
    fname = fdatos.name
    
    x1, y1, y2 = np.loadtxt(fdatos, unpack=True)
    # Vamos a graficar sólo algunos valores (uno de cada 5)
    x = x1[3:-10:5]
    y = y1[3:-10:5]
    yexp = y2[3:-10:5]
    
    # Ejemplo de barras de error que dependen del eje x
    error = 0.05 + 0.3 * np.abs(y)
    
    fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
    ax0.errorbar(x, yexp, yerr=error, fmt='-o')
    ax1.plot(x, 2 * (yexp - y) / (yexp + y), 'or', markersize=8)
    
    
    # Límites de graficación y títulos
    ax0.set_title('Datos con error variable')
    ax1.set_title('Error relativo')
    ax0.set_ylabel('Voltaje (mV)', fontsize='x-large')
    ax1.set_xlabel(r'Tiempo ($\mu$-seg)', fontsize='x-large')
    ax1.set_ylabel('Error relativo', fontsize='x-large')
    ax1.set_xlim((0, 3))
    
    # Guardamos el resultado
    plt.savefig(f'{fname}.png', dpi=150)




.. image:: figuras/11_2_mas_visualizacion_29_0.png


.. code:: python

    # %load scripts/ejemplo_08_5.py
    #! /usr/bin/ipython3
    
    """ Script realizado durante la clase 9. Dos figuras """
    from pathlib import Path
    
    import numpy as np
    import matplotlib.pyplot as plt
    plt.ion()
    
    fname = 'ej_oscil_aten_err'
    # Levantamos los datos
    pardir = Path("..")
    datfile = pardir / f'data/{fname}.dat'
    
    x1, y1, y2 = np.loadtxt(datfile, unpack=True)
    # Vamos a graficar sólo algunos valores (uno de cada 5)
    x = x1[3:-10:5]
    y = y1[3:-10:5]
    yexp = y2[3:-10:5]
    
    # Ejemplo de barras de error que dependen del eje x
    error = 0.05 + 0.3 * np.abs(y)
    
    fig, (ax0, ax1) = plt.subplots(figsize=(10,4), nrows=1, ncols=2)
    ax0.errorbar(x, yexp, yerr=error, fmt='-o')
    ax1.plot(x, 2 * (yexp - y) / (yexp + y), 'or', markersize=8)
    
    
    # Límites de graficación y títulos
    ax0.set_title('Datos con error variable')
    ax1.set_title('Error relativo')
    ax0.set_ylabel('Voltaje (mV)', fontsize='x-large')
    ax1.set_xlabel(r'Tiempo ($\mu$-seg)', fontsize='x-large')
    ax1.set_ylabel('Error relativo', fontsize='x-large')
    ax1.set_xlim((0, 3))
    
    # Guardamos el resultado
    plt.savefig(f'{fname}_B.png', dpi=150)




.. image:: figuras/11_2_mas_visualizacion_30_0.png


En este ejemplo utilizamos un enfoque diferente al utilizado
anteriormente. Matplotlib presenta también una interface orientada a
objetos. La función ``subplots()`` devuelve un par ``fig, axis`` que son
dos objetos utilizados para representar la *figura* y un *eje*. Los
métodos de estos objetos presentan funcionalidad similar a las funciones
del módulo ``pyplot``.

--------------

Ejercicios 11 (b)
=================

2. Para la función definida a trozos:

   .. math::


      f(x) =
      \begin{cases}
        f_{1}(x) = x^{2}/8 & - \pi < x \le \pi/2  \\
        f_{2}(x) = -0.3 x  & \pi/2 < x < \pi \\
        f_{3}(x) = -(x - 2 \pi)^{2}/6 & \pi \le x \le 5 \pi/2 \\
        f_{4}(x) = (x - 2 \pi)/5 & 5 \pi/2 < x \le 3 \pi
        \end{cases}

   realizar la siguiente figura de la manera más fiel posible.

   .. image:: figuras/ejercicio_08_1.png



   **Pistas:** Buscar información sobre ``plt.text()``,
   ``plt.fill_between()`` y sobre ``plt.xticks`` y ``plt.yticks``.

3. Rehacer la siguiente figura:

   .. image:: figuras/ejercicio_08_2.png



--------------

.



