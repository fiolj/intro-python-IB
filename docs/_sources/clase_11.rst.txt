.. _clase_11:

Clase 11: Graficación usando Plotly
====================================


``Plotly`` es una biblioteca similar a ``Matplotlib``. Su origen es una
biblioteca en JavaScript para utilizar en el desarrollo de aplicaciones
web, pero con el tiempo fue extendida con distintos *bindings* para R,
Julia, y, por supuesto, Python.

Una de las características de ``Plotly`` es que tiene un mayor grado
nativo de interactividad que Matplotlib.

``Plotly`` viene en dos sabores: - ``plotly.express``, es una biblioteca
orientada a trabajar con datos con algún tipo de formato (típicamente
``csv``), y está orientada a poder usarse con ``pandas`` que es una
biblioteca para procesar datos. ``pandas`` puede leer fácilmente tablas
de datos, que se pueden graficar eficientemente con ``plotly.express``.
- ``graph_objects``, es el submódulo para graficar más similar a
``Matplotlib``.

Finalmente, verán en la `documentación <https://plotly.com/python/>`__
referencias a ``Dash``, que es otra biblioteca que permite directamente
publicar gráficos en un servicio en la nube, que, por supuesto, provee
la companía que produce ``Plotly``.

Sin embargo, ``Plotly`` es completamente libre.

``Plotly`` se instala usando ``pip``:

``pip install plotly==5.6.0``

o ``conda``:

``conda install -c plotly plotly=5.6.0``

.. code:: python

    import plotly.graph_objects as go
    import numpy as np
    print(np.__version__)



.. parsed-literal::

    1.21.2


Definimos un conjunto de 51 datos equiespaciados entre 0 y 4, y la
función

.. math::


   y = f(x) = 2.5 e^{-1.3 x} + 0.5. e^{-1.6 x}

Además, definimos un conjunto de datos *con ruido*, sumando a :math:`y`
un ruido gaussiano de media 0 y dispersión 1 (ver
``help(np.random.normal)``):

.. code:: python

    x = np.linspace(0,4,51)
    y = 2.5 * np.exp(-1.3 * x) + 0.5 * np.exp(-1.6 * x)
    ruido = 0.2 * np.random.normal(size=x.size)
    medicion = y + ruido
    
    print(x.size)


.. parsed-literal::

    51


.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(x=x,y=y))
    fig.show() # Se muestra el gráfico en la pantalla




.. code:: python

    print(fig)


.. parsed-literal::

    Figure({
        'data': [{'type': 'scatter',
                  'x': array([0.  , 0.08, 0.16, 0.24, 0.32, 0.4 , 0.48, 0.56, 0.64, 0.72, 0.8 , 0.88,
                              0.96, 1.04, 1.12, 1.2 , 1.28, 1.36, 1.44, 1.52, 1.6 , 1.68, 1.76, 1.84,
                              1.92, 2.  , 2.08, 2.16, 2.24, 2.32, 2.4 , 2.48, 2.56, 2.64, 2.72, 2.8 ,
                              2.88, 2.96, 3.04, 3.12, 3.2 , 3.28, 3.36, 3.44, 3.52, 3.6 , 3.68, 3.76,
                              3.84, 3.92, 4.  ]),
                  'y': array([3.        , 2.69298993, 2.41758858, 2.17051953, 1.94884857, 1.74994758,
                              1.5714624 , 1.41128403, 1.26752287, 1.13848575, 1.02265536, 0.91867178,
                              0.82531612, 0.74149572, 0.66623099, 0.59864366, 0.53794617, 0.48343229,
                              0.43446861, 0.39048702, 0.3509779 , 0.31548409, 0.28359542, 0.25494386,
                              0.22919919, 0.20606505, 0.18527545, 0.16659167, 0.14979943, 0.13470634,
                              0.12113972, 0.1089445 , 0.09798146, 0.08812556, 0.07926454, 0.07129757,
                              0.06413406, 0.05769268, 0.05190035, 0.04669142, 0.04200691, 0.03779383,
                              0.03400457, 0.03059634, 0.0275307 , 0.02477309, 0.02229246, 0.0200609 ,
                              0.01805333, 0.01624718, 0.01462219])}],
        'layout': {'template': '...'}
    })


Para ``Plotly``, cualquier objeto gráfico es representado en un árbol de
atributos. Los atributos se componen de una lista de diccionarios de
Python que representan las distintas características del gráfico. Hay
tres atributos básicos - ``data`` que, justamente, representa los datos
a graficar - ``layout``, que describe la representación del gráfico -
``frames``, que se utiliza para hacer animaciones.

En el caso del atributo ``data``, tiene más de 40 tipos de diccionarios
distintos, que se denominan ``trazos`` (*traces*). Cada uno de éstos
representa un tipo de gráfico.

.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
         x=x
        ,y=y))
    fig.add_trace(go.Scatter(
         x=x
        ,y=medicion))
    fig.show()




.. code:: python

    print(fig)


.. parsed-literal::

    Figure({
        'data': [{'type': 'scatter',
                  'x': array([0.  , 0.08, 0.16, 0.24, 0.32, 0.4 , 0.48, 0.56, 0.64, 0.72, 0.8 , 0.88,
                              0.96, 1.04, 1.12, 1.2 , 1.28, 1.36, 1.44, 1.52, 1.6 , 1.68, 1.76, 1.84,
                              1.92, 2.  , 2.08, 2.16, 2.24, 2.32, 2.4 , 2.48, 2.56, 2.64, 2.72, 2.8 ,
                              2.88, 2.96, 3.04, 3.12, 3.2 , 3.28, 3.36, 3.44, 3.52, 3.6 , 3.68, 3.76,
                              3.84, 3.92, 4.  ]),
                  'y': array([3.        , 2.69298993, 2.41758858, 2.17051953, 1.94884857, 1.74994758,
                              1.5714624 , 1.41128403, 1.26752287, 1.13848575, 1.02265536, 0.91867178,
                              0.82531612, 0.74149572, 0.66623099, 0.59864366, 0.53794617, 0.48343229,
                              0.43446861, 0.39048702, 0.3509779 , 0.31548409, 0.28359542, 0.25494386,
                              0.22919919, 0.20606505, 0.18527545, 0.16659167, 0.14979943, 0.13470634,
                              0.12113972, 0.1089445 , 0.09798146, 0.08812556, 0.07926454, 0.07129757,
                              0.06413406, 0.05769268, 0.05190035, 0.04669142, 0.04200691, 0.03779383,
                              0.03400457, 0.03059634, 0.0275307 , 0.02477309, 0.02229246, 0.0200609 ,
                              0.01805333, 0.01624718, 0.01462219])},
                 {'type': 'scatter',
                  'x': array([0.  , 0.08, 0.16, 0.24, 0.32, 0.4 , 0.48, 0.56, 0.64, 0.72, 0.8 , 0.88,
                              0.96, 1.04, 1.12, 1.2 , 1.28, 1.36, 1.44, 1.52, 1.6 , 1.68, 1.76, 1.84,
                              1.92, 2.  , 2.08, 2.16, 2.24, 2.32, 2.4 , 2.48, 2.56, 2.64, 2.72, 2.8 ,
                              2.88, 2.96, 3.04, 3.12, 3.2 , 3.28, 3.36, 3.44, 3.52, 3.6 , 3.68, 3.76,
                              3.84, 3.92, 4.  ]),
                  'y': array([ 3.15990951,  2.78596871,  2.57401082,  2.031529  ,  2.04216858,
                               1.83054335,  1.79290775,  1.47117263,  1.22412934,  1.10933517,
                               0.96514674,  0.95370481,  0.7056636 ,  0.68310772,  0.78396051,
                               0.67516409,  0.35727641,  0.64835938,  0.2848351 ,  0.38640692,
                               0.16166487,  0.27520484,  0.41636932,  0.21329531,  0.08445756,
                               0.28701404,  0.04547701,  0.1643882 ,  0.15225468,  0.09816698,
                               0.15738744,  0.20377393, -0.04316777,  0.14615385, -0.09021025,
                               0.32260069, -0.00415703,  0.16959398,  0.11628936,  0.14616738,
                               0.03704685,  0.09434369, -0.02368097,  0.12290455,  0.06154413,
                               0.19482832,  0.07723687, -0.13565932,  0.06866831, -0.26290002,
                              -0.1588747 ])}],
        'layout': {'template': '...'}
    })


.. code:: python

    fig = go.Figure()
    datos = dict(type='scatter'
                 ,x=x
                 ,y=y)
    datos_medidos = dict(type='scatter'
                 ,x=x
                 ,y=medicion)
    fig.add_trace(datos)
    fig.add_trace(datos_medidos)
    fig.show()
        




.. code:: python

    print(datos)


.. parsed-literal::

    {'type': 'scatter', 'x': array([0.  , 0.08, 0.16, 0.24, 0.32, 0.4 , 0.48, 0.56, 0.64, 0.72, 0.8 ,
           0.88, 0.96, 1.04, 1.12, 1.2 , 1.28, 1.36, 1.44, 1.52, 1.6 , 1.68,
           1.76, 1.84, 1.92, 2.  , 2.08, 2.16, 2.24, 2.32, 2.4 , 2.48, 2.56,
           2.64, 2.72, 2.8 , 2.88, 2.96, 3.04, 3.12, 3.2 , 3.28, 3.36, 3.44,
           3.52, 3.6 , 3.68, 3.76, 3.84, 3.92, 4.  ]), 'y': array([3.        , 2.69298993, 2.41758858, 2.17051953, 1.94884857,
           1.74994758, 1.5714624 , 1.41128403, 1.26752287, 1.13848575,
           1.02265536, 0.91867178, 0.82531612, 0.74149572, 0.66623099,
           0.59864366, 0.53794617, 0.48343229, 0.43446861, 0.39048702,
           0.3509779 , 0.31548409, 0.28359542, 0.25494386, 0.22919919,
           0.20606505, 0.18527545, 0.16659167, 0.14979943, 0.13470634,
           0.12113972, 0.1089445 , 0.09798146, 0.08812556, 0.07926454,
           0.07129757, 0.06413406, 0.05769268, 0.05190035, 0.04669142,
           0.04200691, 0.03779383, 0.03400457, 0.03059634, 0.0275307 ,
           0.02477309, 0.02229246, 0.0200609 , 0.01805333, 0.01624718,
           0.01462219])}


Líneas, símbolos y colores
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
         x=x
        ,y=y
        ,line=dict(color='black',width=2)))
    fig.add_trace(go.Scatter(x=x,y=medicion,
                             line=dict(
                                 color='royalblue'
                                 ,width=4
                                 ,dash='dash')))
    fig.show()




.. code:: python

    help(go.Scatter())


.. parsed-literal::

    Help on Scatter in module plotly.graph_objs._scatter object:
    
    class Scatter(plotly.basedatatypes.BaseTraceType)
     |  Scatter(arg=None, cliponaxis=None, connectgaps=None, customdata=None, customdatasrc=None, dx=None, dy=None, error_x=None, error_y=None, fill=None, fillcolor=None, groupnorm=None, hoverinfo=None, hoverinfosrc=None, hoverlabel=None, hoveron=None, hovertemplate=None, hovertemplatesrc=None, hovertext=None, hovertextsrc=None, ids=None, idssrc=None, legendgroup=None, legendgrouptitle=None, legendrank=None, line=None, marker=None, meta=None, metasrc=None, mode=None, name=None, opacity=None, orientation=None, selected=None, selectedpoints=None, showlegend=None, stackgaps=None, stackgroup=None, stream=None, text=None, textfont=None, textposition=None, textpositionsrc=None, textsrc=None, texttemplate=None, texttemplatesrc=None, uid=None, uirevision=None, unselected=None, visible=None, x=None, x0=None, xaxis=None, xcalendar=None, xhoverformat=None, xperiod=None, xperiod0=None, xperiodalignment=None, xsrc=None, y=None, y0=None, yaxis=None, ycalendar=None, yhoverformat=None, yperiod=None, yperiod0=None, yperiodalignment=None, ysrc=None, **kwargs)
     |  
     |  Method resolution order:
     |      Scatter
     |      plotly.basedatatypes.BaseTraceType
     |      plotly.basedatatypes.BaseTraceHierarchyType
     |      plotly.basedatatypes.BasePlotlyType
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg=None, cliponaxis=None, connectgaps=None, customdata=None, customdatasrc=None, dx=None, dy=None, error_x=None, error_y=None, fill=None, fillcolor=None, groupnorm=None, hoverinfo=None, hoverinfosrc=None, hoverlabel=None, hoveron=None, hovertemplate=None, hovertemplatesrc=None, hovertext=None, hovertextsrc=None, ids=None, idssrc=None, legendgroup=None, legendgrouptitle=None, legendrank=None, line=None, marker=None, meta=None, metasrc=None, mode=None, name=None, opacity=None, orientation=None, selected=None, selectedpoints=None, showlegend=None, stackgaps=None, stackgroup=None, stream=None, text=None, textfont=None, textposition=None, textpositionsrc=None, textsrc=None, texttemplate=None, texttemplatesrc=None, uid=None, uirevision=None, unselected=None, visible=None, x=None, x0=None, xaxis=None, xcalendar=None, xhoverformat=None, xperiod=None, xperiod0=None, xperiodalignment=None, xsrc=None, y=None, y0=None, yaxis=None, ycalendar=None, yhoverformat=None, yperiod=None, yperiod0=None, yperiodalignment=None, ysrc=None, **kwargs)
     |      Construct a new Scatter object
     |      
     |      The scatter trace type encompasses line charts, scatter charts,
     |      text charts, and bubble charts. The data visualized as scatter
     |      point or lines is set in `x` and `y`. Text (appearing either on
     |      the chart or on hover only) is via `text`. Bubble charts are
     |      achieved by setting `marker.size` and/or `marker.color` to
     |      numerical arrays.
     |      
     |      Parameters
     |      ----------
     |      arg
     |          dict of properties compatible with this constructor or
     |          an instance of :class:`plotly.graph_objs.Scatter`
     |      cliponaxis
     |          Determines whether or not markers and text nodes are
     |          clipped about the subplot axes. To show markers and
     |          text nodes above axis lines and tick labels, make sure
     |          to set `xaxis.layer` and `yaxis.layer` to *below
     |          traces*.
     |      connectgaps
     |          Determines whether or not gaps (i.e. {nan} or missing
     |          values) in the provided data arrays are connected.
     |      customdata
     |          Assigns extra data each datum. This may be useful when
     |          listening to hover, click and selection events. Note
     |          that, "scatter" traces also appends customdata items in
     |          the markers DOM elements
     |      customdatasrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `customdata`.
     |      dx
     |          Sets the x coordinate step. See `x0` for more info.
     |      dy
     |          Sets the y coordinate step. See `y0` for more info.
     |      error_x
     |          :class:`plotly.graph_objects.scatter.ErrorX` instance
     |          or dict with compatible properties
     |      error_y
     |          :class:`plotly.graph_objects.scatter.ErrorY` instance
     |          or dict with compatible properties
     |      fill
     |          Sets the area to fill with a solid color. Defaults to
     |          "none" unless this trace is stacked, then it gets
     |          "tonexty" ("tonextx") if `orientation` is "v" ("h") Use
     |          with `fillcolor` if not "none". "tozerox" and "tozeroy"
     |          fill to x=0 and y=0 respectively. "tonextx" and
     |          "tonexty" fill between the endpoints of this trace and
     |          the endpoints of the trace before it, connecting those
     |          endpoints with straight lines (to make a stacked area
     |          graph); if there is no trace before it, they behave
     |          like "tozerox" and "tozeroy". "toself" connects the
     |          endpoints of the trace (or each segment of the trace if
     |          it has gaps) into a closed shape. "tonext" fills the
     |          space between two traces if one completely encloses the
     |          other (eg consecutive contour lines), and behaves like
     |          "toself" if there is no trace before it. "tonext"
     |          should not be used if one trace does not enclose the
     |          other. Traces in a `stackgroup` will only fill to (or
     |          be filled to) other traces in the same group. With
     |          multiple `stackgroup`s or some traces stacked and some
     |          not, if fill-linked traces are not already consecutive,
     |          the later ones will be pushed down in the drawing
     |          order.
     |      fillcolor
     |          Sets the fill color. Defaults to a half-transparent
     |          variant of the line color, marker color, or marker line
     |          color, whichever is available.
     |      groupnorm
     |          Only relevant when `stackgroup` is used, and only the
     |          first `groupnorm` found in the `stackgroup` will be
     |          used - including if `visible` is "legendonly" but not
     |          if it is `false`. Sets the normalization for the sum of
     |          this `stackgroup`. With "fraction", the value of each
     |          trace at each location is divided by the sum of all
     |          trace values at that location. "percent" is the same
     |          but multiplied by 100 to show percentages. If there are
     |          multiple subplots, or multiple `stackgroup`s on one
     |          subplot, each will be normalized within its own set.
     |      hoverinfo
     |          Determines which trace information appear on hover. If
     |          `none` or `skip` are set, no information is displayed
     |          upon hovering. But, if `none` is set, click and hover
     |          events are still fired.
     |      hoverinfosrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `hoverinfo`.
     |      hoverlabel
     |          :class:`plotly.graph_objects.scatter.Hoverlabel`
     |          instance or dict with compatible properties
     |      hoveron
     |          Do the hover effects highlight individual points
     |          (markers or line points) or do they highlight filled
     |          regions? If the fill is "toself" or "tonext" and there
     |          are no markers or text, then the default is "fills",
     |          otherwise it is "points".
     |      hovertemplate
     |          Template string used for rendering the information that
     |          appear on hover box. Note that this will override
     |          `hoverinfo`. Variables are inserted using %{variable},
     |          for example "y: %{y}" as well as %{xother}, {%_xother},
     |          {%_xother_}, {%xother_}. When showing info for several
     |          points, "xother" will be added to those with different
     |          x positions from the first point. An underscore before
     |          or after "(x|y)other" will add a space on that side,
     |          only when this field is shown. Numbers are formatted
     |          using d3-format's syntax %{variable:d3-format}, for
     |          example "Price: %{y:$.2f}".
     |          https://github.com/d3/d3-format/tree/v1.4.5#d3-format
     |          for details on the formatting syntax. Dates are
     |          formatted using d3-time-format's syntax
     |          %{variable|d3-time-format}, for example "Day:
     |          %{2019-01-01|%A}". https://github.com/d3/d3-time-
     |          format/tree/v2.2.3#locale_format for details on the
     |          date formatting syntax. The variables available in
     |          `hovertemplate` are the ones emitted as event data
     |          described at this link
     |          https://plotly.com/javascript/plotlyjs-events/#event-
     |          data. Additionally, every attributes that can be
     |          specified per-point (the ones that are `arrayOk: true`)
     |          are available.  Anything contained in tag `<extra>` is
     |          displayed in the secondary box, for example
     |          "<extra>{fullData.name}</extra>". To hide the secondary
     |          box completely, use an empty tag `<extra></extra>`.
     |      hovertemplatesrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `hovertemplate`.
     |      hovertext
     |          Sets hover text elements associated with each (x,y)
     |          pair. If a single string, the same string appears over
     |          all the data points. If an array of string, the items
     |          are mapped in order to the this trace's (x,y)
     |          coordinates. To be seen, trace `hoverinfo` must contain
     |          a "text" flag.
     |      hovertextsrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `hovertext`.
     |      ids
     |          Assigns id labels to each datum. These ids for object
     |          constancy of data points during animation. Should be an
     |          array of strings, not numbers or any other type.
     |      idssrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `ids`.
     |      legendgroup
     |          Sets the legend group for this trace. Traces part of
     |          the same legend group hide/show at the same time when
     |          toggling legend items.
     |      legendgrouptitle
     |          :class:`plotly.graph_objects.scatter.Legendgrouptitle`
     |          instance or dict with compatible properties
     |      legendrank
     |          Sets the legend rank for this trace. Items and groups
     |          with smaller ranks are presented on top/left side while
     |          with `*reversed* `legend.traceorder` they are on
     |          bottom/right side. The default legendrank is 1000, so
     |          that you can use ranks less than 1000 to place certain
     |          items before all unranked items, and ranks greater than
     |          1000 to go after all unranked items.
     |      line
     |          :class:`plotly.graph_objects.scatter.Line` instance or
     |          dict with compatible properties
     |      marker
     |          :class:`plotly.graph_objects.scatter.Marker` instance
     |          or dict with compatible properties
     |      meta
     |          Assigns extra meta information associated with this
     |          trace that can be used in various text attributes.
     |          Attributes such as trace `name`, graph, axis and
     |          colorbar `title.text`, annotation `text`
     |          `rangeselector`, `updatemenues` and `sliders` `label`
     |          text all support `meta`. To access the trace `meta`
     |          values in an attribute in the same trace, simply use
     |          `%{meta[i]}` where `i` is the index or key of the
     |          `meta` item in question. To access trace `meta` in
     |          layout attributes, use `%{data[n[.meta[i]}` where `i`
     |          is the index or key of the `meta` and `n` is the trace
     |          index.
     |      metasrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `meta`.
     |      mode
     |          Determines the drawing mode for this scatter trace. If
     |          the provided `mode` includes "text" then the `text`
     |          elements appear at the coordinates. Otherwise, the
     |          `text` elements appear on hover. If there are less than
     |          20 points and the trace is not stacked then the default
     |          is "lines+markers". Otherwise, "lines".
     |      name
     |          Sets the trace name. The trace name appear as the
     |          legend item and on hover.
     |      opacity
     |          Sets the opacity of the trace.
     |      orientation
     |          Only relevant when `stackgroup` is used, and only the
     |          first `orientation` found in the `stackgroup` will be
     |          used - including if `visible` is "legendonly" but not
     |          if it is `false`. Sets the stacking direction. With "v"
     |          ("h"), the y (x) values of subsequent traces are added.
     |          Also affects the default value of `fill`.
     |      selected
     |          :class:`plotly.graph_objects.scatter.Selected` instance
     |          or dict with compatible properties
     |      selectedpoints
     |          Array containing integer indices of selected points.
     |          Has an effect only for traces that support selections.
     |          Note that an empty array means an empty selection where
     |          the `unselected` are turned on for all points, whereas,
     |          any other non-array values means no selection all where
     |          the `selected` and `unselected` styles have no effect.
     |      showlegend
     |          Determines whether or not an item corresponding to this
     |          trace is shown in the legend.
     |      stackgaps
     |          Only relevant when `stackgroup` is used, and only the
     |          first `stackgaps` found in the `stackgroup` will be
     |          used - including if `visible` is "legendonly" but not
     |          if it is `false`. Determines how we handle locations at
     |          which other traces in this group have data but this one
     |          does not. With *infer zero* we insert a zero at these
     |          locations. With "interpolate" we linearly interpolate
     |          between existing values, and extrapolate a constant
     |          beyond the existing values.
     |      stackgroup
     |          Set several scatter traces (on the same subplot) to the
     |          same stackgroup in order to add their y values (or
     |          their x values if `orientation` is "h"). If blank or
     |          omitted this trace will not be stacked. Stacking also
     |          turns `fill` on by default, using "tonexty" ("tonextx")
     |          if `orientation` is "h" ("v") and sets the default
     |          `mode` to "lines" irrespective of point count. You can
     |          only stack on a numeric (linear or log) axis. Traces in
     |          a `stackgroup` will only fill to (or be filled to)
     |          other traces in the same group. With multiple
     |          `stackgroup`s or some traces stacked and some not, if
     |          fill-linked traces are not already consecutive, the
     |          later ones will be pushed down in the drawing order.
     |      stream
     |          :class:`plotly.graph_objects.scatter.Stream` instance
     |          or dict with compatible properties
     |      text
     |          Sets text elements associated with each (x,y) pair. If
     |          a single string, the same string appears over all the
     |          data points. If an array of string, the items are
     |          mapped in order to the this trace's (x,y) coordinates.
     |          If trace `hoverinfo` contains a "text" flag and
     |          "hovertext" is not set, these elements will be seen in
     |          the hover labels.
     |      textfont
     |          Sets the text font.
     |      textposition
     |          Sets the positions of the `text` elements with respects
     |          to the (x,y) coordinates.
     |      textpositionsrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `textposition`.
     |      textsrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `text`.
     |      texttemplate
     |          Template string used for rendering the information text
     |          that appear on points. Note that this will override
     |          `textinfo`. Variables are inserted using %{variable},
     |          for example "y: %{y}". Numbers are formatted using
     |          d3-format's syntax %{variable:d3-format}, for example
     |          "Price: %{y:$.2f}".
     |          https://github.com/d3/d3-format/tree/v1.4.5#d3-format
     |          for details on the formatting syntax. Dates are
     |          formatted using d3-time-format's syntax
     |          %{variable|d3-time-format}, for example "Day:
     |          %{2019-01-01|%A}". https://github.com/d3/d3-time-
     |          format/tree/v2.2.3#locale_format for details on the
     |          date formatting syntax. Every attributes that can be
     |          specified per-point (the ones that are `arrayOk: true`)
     |          are available.
     |      texttemplatesrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `texttemplate`.
     |      uid
     |          Assign an id to this trace, Use this to provide object
     |          constancy between traces during animations and
     |          transitions.
     |      uirevision
     |          Controls persistence of some user-driven changes to the
     |          trace: `constraintrange` in `parcoords` traces, as well
     |          as some `editable: true` modifications such as `name`
     |          and `colorbar.title`. Defaults to `layout.uirevision`.
     |          Note that other user-driven trace attribute changes are
     |          controlled by `layout` attributes: `trace.visible` is
     |          controlled by `layout.legend.uirevision`,
     |          `selectedpoints` is controlled by
     |          `layout.selectionrevision`, and `colorbar.(x|y)`
     |          (accessible with `config: {editable: true}`) is
     |          controlled by `layout.editrevision`. Trace changes are
     |          tracked by `uid`, which only falls back on trace index
     |          if no `uid` is provided. So if your app can add/remove
     |          traces before the end of the `data` array, such that
     |          the same trace has a different index, you can still
     |          preserve user-driven changes if you give each trace a
     |          `uid` that stays with it as it moves.
     |      unselected
     |          :class:`plotly.graph_objects.scatter.Unselected`
     |          instance or dict with compatible properties
     |      visible
     |          Determines whether or not this trace is visible. If
     |          "legendonly", the trace is not drawn, but can appear as
     |          a legend item (provided that the legend itself is
     |          visible).
     |      x
     |          Sets the x coordinates.
     |      x0
     |          Alternate to `x`. Builds a linear space of x
     |          coordinates. Use with `dx` where `x0` is the starting
     |          coordinate and `dx` the step.
     |      xaxis
     |          Sets a reference between this trace's x coordinates and
     |          a 2D cartesian x axis. If "x" (the default value), the
     |          x coordinates refer to `layout.xaxis`. If "x2", the x
     |          coordinates refer to `layout.xaxis2`, and so on.
     |      xcalendar
     |          Sets the calendar system to use with `x` date data.
     |      xhoverformat
     |          Sets the hover text formatting rulefor `x`  using d3
     |          formatting mini-languages which are very similar to
     |          those in Python. For numbers, see:
     |          https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
     |          And for dates see: https://github.com/d3/d3-time-
     |          format/tree/v2.2.3#locale_format. We add two items to
     |          d3's date formatter: "%h" for half of the year as a
     |          decimal number as well as "%{n}f" for fractional
     |          seconds with n digits. For example, *2016-10-13
     |          09:15:23.456* with tickformat "%H~%M~%S.%2f" would
     |          display *09~15~23.46*By default the values are
     |          formatted using `xaxis.hoverformat`.
     |      xperiod
     |          Only relevant when the axis `type` is "date". Sets the
     |          period positioning in milliseconds or "M<n>" on the x
     |          axis. Special values in the form of "M<n>" could be
     |          used to declare the number of months. In this case `n`
     |          must be a positive integer.
     |      xperiod0
     |          Only relevant when the axis `type` is "date". Sets the
     |          base for period positioning in milliseconds or date
     |          string on the x0 axis. When `x0period` is round number
     |          of weeks, the `x0period0` by default would be on a
     |          Sunday i.e. 2000-01-02, otherwise it would be at
     |          2000-01-01.
     |      xperiodalignment
     |          Only relevant when the axis `type` is "date". Sets the
     |          alignment of data points on the x axis.
     |      xsrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `x`.
     |      y
     |          Sets the y coordinates.
     |      y0
     |          Alternate to `y`. Builds a linear space of y
     |          coordinates. Use with `dy` where `y0` is the starting
     |          coordinate and `dy` the step.
     |      yaxis
     |          Sets a reference between this trace's y coordinates and
     |          a 2D cartesian y axis. If "y" (the default value), the
     |          y coordinates refer to `layout.yaxis`. If "y2", the y
     |          coordinates refer to `layout.yaxis2`, and so on.
     |      ycalendar
     |          Sets the calendar system to use with `y` date data.
     |      yhoverformat
     |          Sets the hover text formatting rulefor `y`  using d3
     |          formatting mini-languages which are very similar to
     |          those in Python. For numbers, see:
     |          https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
     |          And for dates see: https://github.com/d3/d3-time-
     |          format/tree/v2.2.3#locale_format. We add two items to
     |          d3's date formatter: "%h" for half of the year as a
     |          decimal number as well as "%{n}f" for fractional
     |          seconds with n digits. For example, *2016-10-13
     |          09:15:23.456* with tickformat "%H~%M~%S.%2f" would
     |          display *09~15~23.46*By default the values are
     |          formatted using `yaxis.hoverformat`.
     |      yperiod
     |          Only relevant when the axis `type` is "date". Sets the
     |          period positioning in milliseconds or "M<n>" on the y
     |          axis. Special values in the form of "M<n>" could be
     |          used to declare the number of months. In this case `n`
     |          must be a positive integer.
     |      yperiod0
     |          Only relevant when the axis `type` is "date". Sets the
     |          base for period positioning in milliseconds or date
     |          string on the y0 axis. When `y0period` is round number
     |          of weeks, the `y0period0` by default would be on a
     |          Sunday i.e. 2000-01-02, otherwise it would be at
     |          2000-01-01.
     |      yperiodalignment
     |          Only relevant when the axis `type` is "date". Sets the
     |          alignment of data points on the y axis.
     |      ysrc
     |          Sets the source reference on Chart Studio Cloud for
     |          `y`.
     |      
     |      Returns
     |      -------
     |      Scatter
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cliponaxis
     |      Determines whether or not markers and text nodes are clipped
     |      about the subplot axes. To show markers and text nodes above
     |      axis lines and tick labels, make sure to set `xaxis.layer` and
     |      `yaxis.layer` to *below traces*.
     |      
     |      The 'cliponaxis' property must be specified as a bool
     |      (either True, or False)
     |      
     |      Returns
     |      -------
     |      bool
     |  
     |  connectgaps
     |      Determines whether or not gaps (i.e. {nan} or missing values)
     |      in the provided data arrays are connected.
     |      
     |      The 'connectgaps' property must be specified as a bool
     |      (either True, or False)
     |      
     |      Returns
     |      -------
     |      bool
     |  
     |  customdata
     |      Assigns extra data each datum. This may be useful when
     |      listening to hover, click and selection events. Note that,
     |      "scatter" traces also appends customdata items in the markers
     |      DOM elements
     |      
     |      The 'customdata' property is an array that may be specified as a tuple,
     |      list, numpy array, or pandas Series
     |      
     |      Returns
     |      -------
     |      numpy.ndarray
     |  
     |  customdatasrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `customdata`.
     |      
     |      The 'customdatasrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  dx
     |      Sets the x coordinate step. See `x0` for more info.
     |      
     |      The 'dx' property is a number and may be specified as:
     |        - An int or float
     |      
     |      Returns
     |      -------
     |      int|float
     |  
     |  dy
     |      Sets the y coordinate step. See `y0` for more info.
     |      
     |      The 'dy' property is a number and may be specified as:
     |        - An int or float
     |      
     |      Returns
     |      -------
     |      int|float
     |  
     |  error_x
     |      The 'error_x' property is an instance of ErrorX
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.ErrorX`
     |        - A dict of string/value properties that will be passed
     |          to the ErrorX constructor
     |      
     |          Supported dict properties:
     |              
     |              array
     |                  Sets the data corresponding the length of each
     |                  error bar. Values are plotted relative to the
     |                  underlying data.
     |              arrayminus
     |                  Sets the data corresponding the length of each
     |                  error bar in the bottom (left) direction for
     |                  vertical (horizontal) bars Values are plotted
     |                  relative to the underlying data.
     |              arrayminussrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `arrayminus`.
     |              arraysrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `array`.
     |              color
     |                  Sets the stoke color of the error bars.
     |              copy_ystyle
     |      
     |              symmetric
     |                  Determines whether or not the error bars have
     |                  the same length in both direction (top/bottom
     |                  for vertical bars, left/right for horizontal
     |                  bars.
     |              thickness
     |                  Sets the thickness (in px) of the error bars.
     |              traceref
     |      
     |              tracerefminus
     |      
     |              type
     |                  Determines the rule used to generate the error
     |                  bars. If *constant`, the bar lengths are of a
     |                  constant value. Set this constant in `value`.
     |                  If "percent", the bar lengths correspond to a
     |                  percentage of underlying data. Set this
     |                  percentage in `value`. If "sqrt", the bar
     |                  lengths correspond to the square of the
     |                  underlying data. If "data", the bar lengths are
     |                  set with data set `array`.
     |              value
     |                  Sets the value of either the percentage (if
     |                  `type` is set to "percent") or the constant (if
     |                  `type` is set to "constant") corresponding to
     |                  the lengths of the error bars.
     |              valueminus
     |                  Sets the value of either the percentage (if
     |                  `type` is set to "percent") or the constant (if
     |                  `type` is set to "constant") corresponding to
     |                  the lengths of the error bars in the bottom
     |                  (left) direction for vertical (horizontal) bars
     |              visible
     |                  Determines whether or not this set of error
     |                  bars is visible.
     |              width
     |                  Sets the width (in px) of the cross-bar at both
     |                  ends of the error bars.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.ErrorX
     |  
     |  error_y
     |      The 'error_y' property is an instance of ErrorY
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.ErrorY`
     |        - A dict of string/value properties that will be passed
     |          to the ErrorY constructor
     |      
     |          Supported dict properties:
     |              
     |              array
     |                  Sets the data corresponding the length of each
     |                  error bar. Values are plotted relative to the
     |                  underlying data.
     |              arrayminus
     |                  Sets the data corresponding the length of each
     |                  error bar in the bottom (left) direction for
     |                  vertical (horizontal) bars Values are plotted
     |                  relative to the underlying data.
     |              arrayminussrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `arrayminus`.
     |              arraysrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `array`.
     |              color
     |                  Sets the stoke color of the error bars.
     |              symmetric
     |                  Determines whether or not the error bars have
     |                  the same length in both direction (top/bottom
     |                  for vertical bars, left/right for horizontal
     |                  bars.
     |              thickness
     |                  Sets the thickness (in px) of the error bars.
     |              traceref
     |      
     |              tracerefminus
     |      
     |              type
     |                  Determines the rule used to generate the error
     |                  bars. If *constant`, the bar lengths are of a
     |                  constant value. Set this constant in `value`.
     |                  If "percent", the bar lengths correspond to a
     |                  percentage of underlying data. Set this
     |                  percentage in `value`. If "sqrt", the bar
     |                  lengths correspond to the square of the
     |                  underlying data. If "data", the bar lengths are
     |                  set with data set `array`.
     |              value
     |                  Sets the value of either the percentage (if
     |                  `type` is set to "percent") or the constant (if
     |                  `type` is set to "constant") corresponding to
     |                  the lengths of the error bars.
     |              valueminus
     |                  Sets the value of either the percentage (if
     |                  `type` is set to "percent") or the constant (if
     |                  `type` is set to "constant") corresponding to
     |                  the lengths of the error bars in the bottom
     |                  (left) direction for vertical (horizontal) bars
     |              visible
     |                  Determines whether or not this set of error
     |                  bars is visible.
     |              width
     |                  Sets the width (in px) of the cross-bar at both
     |                  ends of the error bars.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.ErrorY
     |  
     |  fill
     |      Sets the area to fill with a solid color. Defaults to "none"
     |      unless this trace is stacked, then it gets "tonexty"
     |      ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor`
     |      if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0
     |      respectively. "tonextx" and "tonexty" fill between the
     |      endpoints of this trace and the endpoints of the trace before
     |      it, connecting those endpoints with straight lines (to make a
     |      stacked area graph); if there is no trace before it, they
     |      behave like "tozerox" and "tozeroy". "toself" connects the
     |      endpoints of the trace (or each segment of the trace if it has
     |      gaps) into a closed shape. "tonext" fills the space between two
     |      traces if one completely encloses the other (eg consecutive
     |      contour lines), and behaves like "toself" if there is no trace
     |      before it. "tonext" should not be used if one trace does not
     |      enclose the other. Traces in a `stackgroup` will only fill to
     |      (or be filled to) other traces in the same group. With multiple
     |      `stackgroup`s or some traces stacked and some not, if fill-
     |      linked traces are not already consecutive, the later ones will
     |      be pushed down in the drawing order.
     |      
     |      The 'fill' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['none', 'tozeroy', 'tozerox', 'tonexty', 'tonextx',
     |              'toself', 'tonext']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  fillcolor
     |      Sets the fill color. Defaults to a half-transparent variant of
     |      the line color, marker color, or marker line color, whichever
     |      is available.
     |      
     |      The 'fillcolor' property is a color and may be specified as:
     |        - A hex string (e.g. '#ff0000')
     |        - An rgb/rgba string (e.g. 'rgb(255,0,0)')
     |        - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
     |        - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
     |        - A named CSS color:
     |              aliceblue, antiquewhite, aqua, aquamarine, azure,
     |              beige, bisque, black, blanchedalmond, blue,
     |              blueviolet, brown, burlywood, cadetblue,
     |              chartreuse, chocolate, coral, cornflowerblue,
     |              cornsilk, crimson, cyan, darkblue, darkcyan,
     |              darkgoldenrod, darkgray, darkgrey, darkgreen,
     |              darkkhaki, darkmagenta, darkolivegreen, darkorange,
     |              darkorchid, darkred, darksalmon, darkseagreen,
     |              darkslateblue, darkslategray, darkslategrey,
     |              darkturquoise, darkviolet, deeppink, deepskyblue,
     |              dimgray, dimgrey, dodgerblue, firebrick,
     |              floralwhite, forestgreen, fuchsia, gainsboro,
     |              ghostwhite, gold, goldenrod, gray, grey, green,
     |              greenyellow, honeydew, hotpink, indianred, indigo,
     |              ivory, khaki, lavender, lavenderblush, lawngreen,
     |              lemonchiffon, lightblue, lightcoral, lightcyan,
     |              lightgoldenrodyellow, lightgray, lightgrey,
     |              lightgreen, lightpink, lightsalmon, lightseagreen,
     |              lightskyblue, lightslategray, lightslategrey,
     |              lightsteelblue, lightyellow, lime, limegreen,
     |              linen, magenta, maroon, mediumaquamarine,
     |              mediumblue, mediumorchid, mediumpurple,
     |              mediumseagreen, mediumslateblue, mediumspringgreen,
     |              mediumturquoise, mediumvioletred, midnightblue,
     |              mintcream, mistyrose, moccasin, navajowhite, navy,
     |              oldlace, olive, olivedrab, orange, orangered,
     |              orchid, palegoldenrod, palegreen, paleturquoise,
     |              palevioletred, papayawhip, peachpuff, peru, pink,
     |              plum, powderblue, purple, red, rosybrown,
     |              royalblue, rebeccapurple, saddlebrown, salmon,
     |              sandybrown, seagreen, seashell, sienna, silver,
     |              skyblue, slateblue, slategray, slategrey, snow,
     |              springgreen, steelblue, tan, teal, thistle, tomato,
     |              turquoise, violet, wheat, white, whitesmoke,
     |              yellow, yellowgreen
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  groupnorm
     |      Only relevant when `stackgroup` is used, and only the first
     |      `groupnorm` found in the `stackgroup` will be used - including
     |      if `visible` is "legendonly" but not if it is `false`. Sets the
     |      normalization for the sum of this `stackgroup`. With
     |      "fraction", the value of each trace at each location is divided
     |      by the sum of all trace values at that location. "percent" is
     |      the same but multiplied by 100 to show percentages. If there
     |      are multiple subplots, or multiple `stackgroup`s on one
     |      subplot, each will be normalized within its own set.
     |      
     |      The 'groupnorm' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['', 'fraction', 'percent']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  hoverinfo
     |      Determines which trace information appear on hover. If `none`
     |      or `skip` are set, no information is displayed upon hovering.
     |      But, if `none` is set, click and hover events are still fired.
     |      
     |      The 'hoverinfo' property is a flaglist and may be specified
     |      as a string containing:
     |        - Any combination of ['x', 'y', 'z', 'text', 'name'] joined with '+' characters
     |          (e.g. 'x+y')
     |          OR exactly one of ['all', 'none', 'skip'] (e.g. 'skip')
     |        - A list or array of the above
     |      
     |      Returns
     |      -------
     |      Any|numpy.ndarray
     |  
     |  hoverinfosrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `hoverinfo`.
     |      
     |      The 'hoverinfosrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  hoverlabel
     |      The 'hoverlabel' property is an instance of Hoverlabel
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Hoverlabel`
     |        - A dict of string/value properties that will be passed
     |          to the Hoverlabel constructor
     |      
     |          Supported dict properties:
     |              
     |              align
     |                  Sets the horizontal alignment of the text
     |                  content within hover label box. Has an effect
     |                  only if the hover label text spans more two or
     |                  more lines
     |              alignsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `align`.
     |              bgcolor
     |                  Sets the background color of the hover labels
     |                  for this trace
     |              bgcolorsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `bgcolor`.
     |              bordercolor
     |                  Sets the border color of the hover labels for
     |                  this trace.
     |              bordercolorsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `bordercolor`.
     |              font
     |                  Sets the font used in hover labels.
     |              namelength
     |                  Sets the default length (in number of
     |                  characters) of the trace name in the hover
     |                  labels for all traces. -1 shows the whole name
     |                  regardless of length. 0-3 shows the first 0-3
     |                  characters, and an integer >3 will show the
     |                  whole name if it is less than that many
     |                  characters, but if it is longer, will truncate
     |                  to `namelength - 3` characters and add an
     |                  ellipsis.
     |              namelengthsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `namelength`.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Hoverlabel
     |  
     |  hoveron
     |      Do the hover effects highlight individual points (markers or
     |      line points) or do they highlight filled regions? If the fill
     |      is "toself" or "tonext" and there are no markers or text, then
     |      the default is "fills", otherwise it is "points".
     |      
     |      The 'hoveron' property is a flaglist and may be specified
     |      as a string containing:
     |        - Any combination of ['points', 'fills'] joined with '+' characters
     |          (e.g. 'points+fills')
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  hovertemplate
     |      Template string used for rendering the information that appear
     |      on hover box. Note that this will override `hoverinfo`.
     |      Variables are inserted using %{variable}, for example "y: %{y}"
     |      as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When
     |      showing info for several points, "xother" will be added to
     |      those with different x positions from the first point. An
     |      underscore before or after "(x|y)other" will add a space on
     |      that side, only when this field is shown. Numbers are formatted
     |      using d3-format's syntax %{variable:d3-format}, for example
     |      "Price: %{y:$.2f}".
     |      https://github.com/d3/d3-format/tree/v1.4.5#d3-format for
     |      details on the formatting syntax. Dates are formatted using
     |      d3-time-format's syntax %{variable|d3-time-format}, for example
     |      "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-
     |      format/tree/v2.2.3#locale_format for details on the date
     |      formatting syntax. The variables available in `hovertemplate`
     |      are the ones emitted as event data described at this link
     |      https://plotly.com/javascript/plotlyjs-events/#event-data.
     |      Additionally, every attributes that can be specified per-point
     |      (the ones that are `arrayOk: true`) are available.  Anything
     |      contained in tag `<extra>` is displayed in the secondary box,
     |      for example "<extra>{fullData.name}</extra>". To hide the
     |      secondary box completely, use an empty tag `<extra></extra>`.
     |      
     |      The 'hovertemplate' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |        - A tuple, list, or one-dimensional numpy array of the above
     |      
     |      Returns
     |      -------
     |      str|numpy.ndarray
     |  
     |  hovertemplatesrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `hovertemplate`.
     |      
     |      The 'hovertemplatesrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  hovertext
     |      Sets hover text elements associated with each (x,y) pair. If a
     |      single string, the same string appears over all the data
     |      points. If an array of string, the items are mapped in order to
     |      the this trace's (x,y) coordinates. To be seen, trace
     |      `hoverinfo` must contain a "text" flag.
     |      
     |      The 'hovertext' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |        - A tuple, list, or one-dimensional numpy array of the above
     |      
     |      Returns
     |      -------
     |      str|numpy.ndarray
     |  
     |  hovertextsrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `hovertext`.
     |      
     |      The 'hovertextsrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  ids
     |      Assigns id labels to each datum. These ids for object constancy
     |      of data points during animation. Should be an array of strings,
     |      not numbers or any other type.
     |      
     |      The 'ids' property is an array that may be specified as a tuple,
     |      list, numpy array, or pandas Series
     |      
     |      Returns
     |      -------
     |      numpy.ndarray
     |  
     |  idssrc
     |      Sets the source reference on Chart Studio Cloud for `ids`.
     |      
     |      The 'idssrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  legendgroup
     |      Sets the legend group for this trace. Traces part of the same
     |      legend group hide/show at the same time when toggling legend
     |      items.
     |      
     |      The 'legendgroup' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  legendgrouptitle
     |      The 'legendgrouptitle' property is an instance of Legendgrouptitle
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Legendgrouptitle`
     |        - A dict of string/value properties that will be passed
     |          to the Legendgrouptitle constructor
     |      
     |          Supported dict properties:
     |              
     |              font
     |                  Sets this legend group's title font.
     |              text
     |                  Sets the title of the legend group.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Legendgrouptitle
     |  
     |  legendrank
     |      Sets the legend rank for this trace. Items and groups with
     |      smaller ranks are presented on top/left side while with
     |      `*reversed* `legend.traceorder` they are on bottom/right side.
     |      The default legendrank is 1000, so that you can use ranks less
     |      than 1000 to place certain items before all unranked items, and
     |      ranks greater than 1000 to go after all unranked items.
     |      
     |      The 'legendrank' property is a number and may be specified as:
     |        - An int or float
     |      
     |      Returns
     |      -------
     |      int|float
     |  
     |  line
     |      The 'line' property is an instance of Line
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Line`
     |        - A dict of string/value properties that will be passed
     |          to the Line constructor
     |      
     |          Supported dict properties:
     |              
     |              color
     |                  Sets the line color.
     |              dash
     |                  Sets the dash style of lines. Set to a dash
     |                  type string ("solid", "dot", "dash",
     |                  "longdash", "dashdot", or "longdashdot") or a
     |                  dash length list in px (eg "5px,10px,2px,2px").
     |              shape
     |                  Determines the line shape. With "spline" the
     |                  lines are drawn using spline interpolation. The
     |                  other available values correspond to step-wise
     |                  line shapes.
     |              simplify
     |                  Simplifies lines by removing nearly-collinear
     |                  points. When transitioning lines, it may be
     |                  desirable to disable this so that the number of
     |                  points along the resulting SVG path is
     |                  unaffected.
     |              smoothing
     |                  Has an effect only if `shape` is set to
     |                  "spline" Sets the amount of smoothing. 0
     |                  corresponds to no smoothing (equivalent to a
     |                  "linear" shape).
     |              width
     |                  Sets the line width (in px).
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Line
     |  
     |  marker
     |      The 'marker' property is an instance of Marker
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Marker`
     |        - A dict of string/value properties that will be passed
     |          to the Marker constructor
     |      
     |          Supported dict properties:
     |              
     |              autocolorscale
     |                  Determines whether the colorscale is a default
     |                  palette (`autocolorscale: true`) or the palette
     |                  determined by `marker.colorscale`. Has an
     |                  effect only if in `marker.color`is set to a
     |                  numerical array. In case `colorscale` is
     |                  unspecified or `autocolorscale` is true, the
     |                  default  palette will be chosen according to
     |                  whether numbers in the `color` array are all
     |                  positive, all negative or mixed.
     |              cauto
     |                  Determines whether or not the color domain is
     |                  computed with respect to the input data (here
     |                  in `marker.color`) or the bounds set in
     |                  `marker.cmin` and `marker.cmax`  Has an effect
     |                  only if in `marker.color`is set to a numerical
     |                  array. Defaults to `false` when `marker.cmin`
     |                  and `marker.cmax` are set by the user.
     |              cmax
     |                  Sets the upper bound of the color domain. Has
     |                  an effect only if in `marker.color`is set to a
     |                  numerical array. Value should have the same
     |                  units as in `marker.color` and if set,
     |                  `marker.cmin` must be set as well.
     |              cmid
     |                  Sets the mid-point of the color domain by
     |                  scaling `marker.cmin` and/or `marker.cmax` to
     |                  be equidistant to this point. Has an effect
     |                  only if in `marker.color`is set to a numerical
     |                  array. Value should have the same units as in
     |                  `marker.color`. Has no effect when
     |                  `marker.cauto` is `false`.
     |              cmin
     |                  Sets the lower bound of the color domain. Has
     |                  an effect only if in `marker.color`is set to a
     |                  numerical array. Value should have the same
     |                  units as in `marker.color` and if set,
     |                  `marker.cmax` must be set as well.
     |              color
     |                  Sets themarkercolor. It accepts either a
     |                  specific color or an array of numbers that are
     |                  mapped to the colorscale relative to the max
     |                  and min values of the array or relative to
     |                  `marker.cmin` and `marker.cmax` if set.
     |              coloraxis
     |                  Sets a reference to a shared color axis.
     |                  References to these shared color axes are
     |                  "coloraxis", "coloraxis2", "coloraxis3", etc.
     |                  Settings for these shared color axes are set in
     |                  the layout, under `layout.coloraxis`,
     |                  `layout.coloraxis2`, etc. Note that multiple
     |                  color scales can be linked to the same color
     |                  axis.
     |              colorbar
     |                  :class:`plotly.graph_objects.scatter.marker.Col
     |                  orBar` instance or dict with compatible
     |                  properties
     |              colorscale
     |                  Sets the colorscale. Has an effect only if in
     |                  `marker.color`is set to a numerical array. The
     |                  colorscale must be an array containing arrays
     |                  mapping a normalized value to an rgb, rgba,
     |                  hex, hsl, hsv, or named color string. At
     |                  minimum, a mapping for the lowest (0) and
     |                  highest (1) values are required. For example,
     |                  `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`.
     |                  To control the bounds of the colorscale in
     |                  color space, use`marker.cmin` and
     |                  `marker.cmax`. Alternatively, `colorscale` may
     |                  be a palette name string of the following list:
     |                  Blackbody,Bluered,Blues,Cividis,Earth,Electric,
     |                  Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,Rd
     |                  Bu,Reds,Viridis,YlGnBu,YlOrRd.
     |              colorsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `color`.
     |              gradient
     |                  :class:`plotly.graph_objects.scatter.marker.Gra
     |                  dient` instance or dict with compatible
     |                  properties
     |              line
     |                  :class:`plotly.graph_objects.scatter.marker.Lin
     |                  e` instance or dict with compatible properties
     |              maxdisplayed
     |                  Sets a maximum number of points to be drawn on
     |                  the graph. 0 corresponds to no limit.
     |              opacity
     |                  Sets the marker opacity.
     |              opacitysrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `opacity`.
     |              reversescale
     |                  Reverses the color mapping if true. Has an
     |                  effect only if in `marker.color`is set to a
     |                  numerical array. If true, `marker.cmin` will
     |                  correspond to the last color in the array and
     |                  `marker.cmax` will correspond to the first
     |                  color.
     |              showscale
     |                  Determines whether or not a colorbar is
     |                  displayed for this trace. Has an effect only if
     |                  in `marker.color`is set to a numerical array.
     |              size
     |                  Sets the marker size (in px).
     |              sizemin
     |                  Has an effect only if `marker.size` is set to a
     |                  numerical array. Sets the minimum size (in px)
     |                  of the rendered marker points.
     |              sizemode
     |                  Has an effect only if `marker.size` is set to a
     |                  numerical array. Sets the rule for which the
     |                  data in `size` is converted to pixels.
     |              sizeref
     |                  Has an effect only if `marker.size` is set to a
     |                  numerical array. Sets the scale factor used to
     |                  determine the rendered size of marker points.
     |                  Use with `sizemin` and `sizemode`.
     |              sizesrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `size`.
     |              symbol
     |                  Sets the marker symbol type. Adding 100 is
     |                  equivalent to appending "-open" to a symbol
     |                  name. Adding 200 is equivalent to appending
     |                  "-dot" to a symbol name. Adding 300 is
     |                  equivalent to appending "-open-dot" or "dot-
     |                  open" to a symbol name.
     |              symbolsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `symbol`.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Marker
     |  
     |  meta
     |      Assigns extra meta information associated with this trace that
     |      can be used in various text attributes. Attributes such as
     |      trace `name`, graph, axis and colorbar `title.text`, annotation
     |      `text` `rangeselector`, `updatemenues` and `sliders` `label`
     |      text all support `meta`. To access the trace `meta` values in
     |      an attribute in the same trace, simply use `%{meta[i]}` where
     |      `i` is the index or key of the `meta` item in question. To
     |      access trace `meta` in layout attributes, use
     |      `%{data[n[.meta[i]}` where `i` is the index or key of the
     |      `meta` and `n` is the trace index.
     |      
     |      The 'meta' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any|numpy.ndarray
     |  
     |  metasrc
     |      Sets the source reference on Chart Studio Cloud for `meta`.
     |      
     |      The 'metasrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  mode
     |      Determines the drawing mode for this scatter trace. If the
     |      provided `mode` includes "text" then the `text` elements appear
     |      at the coordinates. Otherwise, the `text` elements appear on
     |      hover. If there are less than 20 points and the trace is not
     |      stacked then the default is "lines+markers". Otherwise,
     |      "lines".
     |      
     |      The 'mode' property is a flaglist and may be specified
     |      as a string containing:
     |        - Any combination of ['lines', 'markers', 'text'] joined with '+' characters
     |          (e.g. 'lines+markers')
     |          OR exactly one of ['none'] (e.g. 'none')
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  name
     |      Sets the trace name. The trace name appear as the legend item
     |      and on hover.
     |      
     |      The 'name' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  opacity
     |      Sets the opacity of the trace.
     |      
     |      The 'opacity' property is a number and may be specified as:
     |        - An int or float in the interval [0, 1]
     |      
     |      Returns
     |      -------
     |      int|float
     |  
     |  orientation
     |      Only relevant when `stackgroup` is used, and only the first
     |      `orientation` found in the `stackgroup` will be used -
     |      including if `visible` is "legendonly" but not if it is
     |      `false`. Sets the stacking direction. With "v" ("h"), the y (x)
     |      values of subsequent traces are added. Also affects the default
     |      value of `fill`.
     |      
     |      The 'orientation' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['v', 'h']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  selected
     |      The 'selected' property is an instance of Selected
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Selected`
     |        - A dict of string/value properties that will be passed
     |          to the Selected constructor
     |      
     |          Supported dict properties:
     |              
     |              marker
     |                  :class:`plotly.graph_objects.scatter.selected.M
     |                  arker` instance or dict with compatible
     |                  properties
     |              textfont
     |                  :class:`plotly.graph_objects.scatter.selected.T
     |                  extfont` instance or dict with compatible
     |                  properties
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Selected
     |  
     |  selectedpoints
     |      Array containing integer indices of selected points. Has an
     |      effect only for traces that support selections. Note that an
     |      empty array means an empty selection where the `unselected` are
     |      turned on for all points, whereas, any other non-array values
     |      means no selection all where the `selected` and `unselected`
     |      styles have no effect.
     |      
     |      The 'selectedpoints' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  showlegend
     |      Determines whether or not an item corresponding to this trace
     |      is shown in the legend.
     |      
     |      The 'showlegend' property must be specified as a bool
     |      (either True, or False)
     |      
     |      Returns
     |      -------
     |      bool
     |  
     |  stackgaps
     |      Only relevant when `stackgroup` is used, and only the first
     |      `stackgaps` found in the `stackgroup` will be used - including
     |      if `visible` is "legendonly" but not if it is `false`.
     |      Determines how we handle locations at which other traces in
     |      this group have data but this one does not. With *infer zero*
     |      we insert a zero at these locations. With "interpolate" we
     |      linearly interpolate between existing values, and extrapolate a
     |      constant beyond the existing values.
     |      
     |      The 'stackgaps' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['infer zero', 'interpolate']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  stackgroup
     |      Set several scatter traces (on the same subplot) to the same
     |      stackgroup in order to add their y values (or their x values if
     |      `orientation` is "h"). If blank or omitted this trace will not
     |      be stacked. Stacking also turns `fill` on by default, using
     |      "tonexty" ("tonextx") if `orientation` is "h" ("v") and sets
     |      the default `mode` to "lines" irrespective of point count. You
     |      can only stack on a numeric (linear or log) axis. Traces in a
     |      `stackgroup` will only fill to (or be filled to) other traces
     |      in the same group. With multiple `stackgroup`s or some traces
     |      stacked and some not, if fill-linked traces are not already
     |      consecutive, the later ones will be pushed down in the drawing
     |      order.
     |      
     |      The 'stackgroup' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  stream
     |      The 'stream' property is an instance of Stream
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Stream`
     |        - A dict of string/value properties that will be passed
     |          to the Stream constructor
     |      
     |          Supported dict properties:
     |              
     |              maxpoints
     |                  Sets the maximum number of points to keep on
     |                  the plots from an incoming stream. If
     |                  `maxpoints` is set to 50, only the newest 50
     |                  points will be displayed on the plot.
     |              token
     |                  The stream id number links a data trace on a
     |                  plot with a stream. See https://chart-
     |                  studio.plotly.com/settings for more details.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Stream
     |  
     |  text
     |      Sets text elements associated with each (x,y) pair. If a single
     |      string, the same string appears over all the data points. If an
     |      array of string, the items are mapped in order to the this
     |      trace's (x,y) coordinates. If trace `hoverinfo` contains a
     |      "text" flag and "hovertext" is not set, these elements will be
     |      seen in the hover labels.
     |      
     |      The 'text' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |        - A tuple, list, or one-dimensional numpy array of the above
     |      
     |      Returns
     |      -------
     |      str|numpy.ndarray
     |  
     |  textfont
     |      Sets the text font.
     |      
     |      The 'textfont' property is an instance of Textfont
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Textfont`
     |        - A dict of string/value properties that will be passed
     |          to the Textfont constructor
     |      
     |          Supported dict properties:
     |              
     |              color
     |      
     |              colorsrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `color`.
     |              family
     |                  HTML font family - the typeface that will be
     |                  applied by the web browser. The web browser
     |                  will only be able to apply a font if it is
     |                  available on the system which it operates.
     |                  Provide multiple font families, separated by
     |                  commas, to indicate the preference in which to
     |                  apply fonts if they aren't available on the
     |                  system. The Chart Studio Cloud (at
     |                  https://chart-studio.plotly.com or on-premise)
     |                  generates images on a server, where only a
     |                  select number of fonts are installed and
     |                  supported. These include "Arial", "Balto",
     |                  "Courier New", "Droid Sans",, "Droid Serif",
     |                  "Droid Sans Mono", "Gravitas One", "Old
     |                  Standard TT", "Open Sans", "Overpass", "PT Sans
     |                  Narrow", "Raleway", "Times New Roman".
     |              familysrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `family`.
     |              size
     |      
     |              sizesrc
     |                  Sets the source reference on Chart Studio Cloud
     |                  for `size`.
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Textfont
     |  
     |  textposition
     |      Sets the positions of the `text` elements with respects to the
     |      (x,y) coordinates.
     |      
     |      The 'textposition' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['top left', 'top center', 'top right', 'middle left',
     |              'middle center', 'middle right', 'bottom left', 'bottom
     |              center', 'bottom right']
     |        - A tuple, list, or one-dimensional numpy array of the above
     |      
     |      Returns
     |      -------
     |      Any|numpy.ndarray
     |  
     |  textpositionsrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `textposition`.
     |      
     |      The 'textpositionsrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  textsrc
     |      Sets the source reference on Chart Studio Cloud for `text`.
     |      
     |      The 'textsrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  texttemplate
     |      Template string used for rendering the information text that
     |      appear on points. Note that this will override `textinfo`.
     |      Variables are inserted using %{variable}, for example "y:
     |      %{y}". Numbers are formatted using d3-format's syntax
     |      %{variable:d3-format}, for example "Price: %{y:$.2f}".
     |      https://github.com/d3/d3-format/tree/v1.4.5#d3-format for
     |      details on the formatting syntax. Dates are formatted using
     |      d3-time-format's syntax %{variable|d3-time-format}, for example
     |      "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-
     |      format/tree/v2.2.3#locale_format for details on the date
     |      formatting syntax. Every attributes that can be specified per-
     |      point (the ones that are `arrayOk: true`) are available.
     |      
     |      The 'texttemplate' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |        - A tuple, list, or one-dimensional numpy array of the above
     |      
     |      Returns
     |      -------
     |      str|numpy.ndarray
     |  
     |  texttemplatesrc
     |      Sets the source reference on Chart Studio Cloud for
     |      `texttemplate`.
     |      
     |      The 'texttemplatesrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  uid
     |      Assign an id to this trace, Use this to provide object
     |      constancy between traces during animations and transitions.
     |      
     |      The 'uid' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  uirevision
     |      Controls persistence of some user-driven changes to the trace:
     |      `constraintrange` in `parcoords` traces, as well as some
     |      `editable: true` modifications such as `name` and
     |      `colorbar.title`. Defaults to `layout.uirevision`. Note that
     |      other user-driven trace attribute changes are controlled by
     |      `layout` attributes: `trace.visible` is controlled by
     |      `layout.legend.uirevision`, `selectedpoints` is controlled by
     |      `layout.selectionrevision`, and `colorbar.(x|y)` (accessible
     |      with `config: {editable: true}`) is controlled by
     |      `layout.editrevision`. Trace changes are tracked by `uid`,
     |      which only falls back on trace index if no `uid` is provided.
     |      So if your app can add/remove traces before the end of the
     |      `data` array, such that the same trace has a different index,
     |      you can still preserve user-driven changes if you give each
     |      trace a `uid` that stays with it as it moves.
     |      
     |      The 'uirevision' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  unselected
     |      The 'unselected' property is an instance of Unselected
     |      that may be specified as:
     |        - An instance of :class:`plotly.graph_objs.scatter.Unselected`
     |        - A dict of string/value properties that will be passed
     |          to the Unselected constructor
     |      
     |          Supported dict properties:
     |              
     |              marker
     |                  :class:`plotly.graph_objects.scatter.unselected
     |                  .Marker` instance or dict with compatible
     |                  properties
     |              textfont
     |                  :class:`plotly.graph_objects.scatter.unselected
     |                  .Textfont` instance or dict with compatible
     |                  properties
     |      
     |      Returns
     |      -------
     |      plotly.graph_objs.scatter.Unselected
     |  
     |  visible
     |      Determines whether or not this trace is visible. If
     |      "legendonly", the trace is not drawn, but can appear as a
     |      legend item (provided that the legend itself is visible).
     |      
     |      The 'visible' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              [True, False, 'legendonly']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  x
     |      Sets the x coordinates.
     |      
     |      The 'x' property is an array that may be specified as a tuple,
     |      list, numpy array, or pandas Series
     |      
     |      Returns
     |      -------
     |      numpy.ndarray
     |  
     |  x0
     |      Alternate to `x`. Builds a linear space of x coordinates. Use
     |      with `dx` where `x0` is the starting coordinate and `dx` the
     |      step.
     |      
     |      The 'x0' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  xaxis
     |      Sets a reference between this trace's x coordinates and a 2D
     |      cartesian x axis. If "x" (the default value), the x coordinates
     |      refer to `layout.xaxis`. If "x2", the x coordinates refer to
     |      `layout.xaxis2`, and so on.
     |      
     |      The 'xaxis' property is an identifier of a particular
     |      subplot, of type 'x', that may be specified as the string 'x'
     |      optionally followed by an integer >= 1
     |      (e.g. 'x', 'x1', 'x2', 'x3', etc.)
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  xcalendar
     |      Sets the calendar system to use with `x` date data.
     |      
     |      The 'xcalendar' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['chinese', 'coptic', 'discworld', 'ethiopian',
     |              'gregorian', 'hebrew', 'islamic', 'jalali', 'julian',
     |              'mayan', 'nanakshahi', 'nepali', 'persian', 'taiwan',
     |              'thai', 'ummalqura']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  xhoverformat
     |      Sets the hover text formatting rulefor `x`  using d3 formatting
     |      mini-languages which are very similar to those in Python. For
     |      numbers, see:
     |      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for
     |      dates see: https://github.com/d3/d3-time-
     |      format/tree/v2.2.3#locale_format. We add two items to d3's date
     |      formatter: "%h" for half of the year as a decimal number as
     |      well as "%{n}f" for fractional seconds with n digits. For
     |      example, *2016-10-13 09:15:23.456* with tickformat
     |      "%H~%M~%S.%2f" would display *09~15~23.46*By default the values
     |      are formatted using `xaxis.hoverformat`.
     |      
     |      The 'xhoverformat' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  xperiod
     |      Only relevant when the axis `type` is "date". Sets the period
     |      positioning in milliseconds or "M<n>" on the x axis. Special
     |      values in the form of "M<n>" could be used to declare the
     |      number of months. In this case `n` must be a positive integer.
     |      
     |      The 'xperiod' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  xperiod0
     |      Only relevant when the axis `type` is "date". Sets the base for
     |      period positioning in milliseconds or date string on the x0
     |      axis. When `x0period` is round number of weeks, the `x0period0`
     |      by default would be on a Sunday i.e. 2000-01-02, otherwise it
     |      would be at 2000-01-01.
     |      
     |      The 'xperiod0' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  xperiodalignment
     |      Only relevant when the axis `type` is "date". Sets the
     |      alignment of data points on the x axis.
     |      
     |      The 'xperiodalignment' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['start', 'middle', 'end']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  xsrc
     |      Sets the source reference on Chart Studio Cloud for `x`.
     |      
     |      The 'xsrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  y
     |      Sets the y coordinates.
     |      
     |      The 'y' property is an array that may be specified as a tuple,
     |      list, numpy array, or pandas Series
     |      
     |      Returns
     |      -------
     |      numpy.ndarray
     |  
     |  y0
     |      Alternate to `y`. Builds a linear space of y coordinates. Use
     |      with `dy` where `y0` is the starting coordinate and `dy` the
     |      step.
     |      
     |      The 'y0' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  yaxis
     |      Sets a reference between this trace's y coordinates and a 2D
     |      cartesian y axis. If "y" (the default value), the y coordinates
     |      refer to `layout.yaxis`. If "y2", the y coordinates refer to
     |      `layout.yaxis2`, and so on.
     |      
     |      The 'yaxis' property is an identifier of a particular
     |      subplot, of type 'y', that may be specified as the string 'y'
     |      optionally followed by an integer >= 1
     |      (e.g. 'y', 'y1', 'y2', 'y3', etc.)
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  ycalendar
     |      Sets the calendar system to use with `y` date data.
     |      
     |      The 'ycalendar' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['chinese', 'coptic', 'discworld', 'ethiopian',
     |              'gregorian', 'hebrew', 'islamic', 'jalali', 'julian',
     |              'mayan', 'nanakshahi', 'nepali', 'persian', 'taiwan',
     |              'thai', 'ummalqura']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  yhoverformat
     |      Sets the hover text formatting rulefor `y`  using d3 formatting
     |      mini-languages which are very similar to those in Python. For
     |      numbers, see:
     |      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for
     |      dates see: https://github.com/d3/d3-time-
     |      format/tree/v2.2.3#locale_format. We add two items to d3's date
     |      formatter: "%h" for half of the year as a decimal number as
     |      well as "%{n}f" for fractional seconds with n digits. For
     |      example, *2016-10-13 09:15:23.456* with tickformat
     |      "%H~%M~%S.%2f" would display *09~15~23.46*By default the values
     |      are formatted using `yaxis.hoverformat`.
     |      
     |      The 'yhoverformat' property is a string and must be specified as:
     |        - A string
     |        - A number that will be converted to a string
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  yperiod
     |      Only relevant when the axis `type` is "date". Sets the period
     |      positioning in milliseconds or "M<n>" on the y axis. Special
     |      values in the form of "M<n>" could be used to declare the
     |      number of months. In this case `n` must be a positive integer.
     |      
     |      The 'yperiod' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  yperiod0
     |      Only relevant when the axis `type` is "date". Sets the base for
     |      period positioning in milliseconds or date string on the y0
     |      axis. When `y0period` is round number of weeks, the `y0period0`
     |      by default would be on a Sunday i.e. 2000-01-02, otherwise it
     |      would be at 2000-01-01.
     |      
     |      The 'yperiod0' property accepts values of any type
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  yperiodalignment
     |      Only relevant when the axis `type` is "date". Sets the
     |      alignment of data points on the y axis.
     |      
     |      The 'yperiodalignment' property is an enumeration that may be specified as:
     |        - One of the following enumeration values:
     |              ['start', 'middle', 'end']
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  ysrc
     |      Sets the source reference on Chart Studio Cloud for `y`.
     |      
     |      The 'ysrc' property must be specified as a string or
     |      as a plotly.grid_objs.Column object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from plotly.basedatatypes.BaseTraceType:
     |  
     |  on_click(self, callback, append=False)
     |      Register function to be called when the user clicks on one or more
     |      points in this trace.
     |      
     |      Note: Callbacks will only be triggered when the trace belongs to a
     |      instance of plotly.graph_objs.FigureWidget and it is displayed in an
     |      ipywidget context. Callbacks will not be triggered on figures
     |      that are displayed using plot/iplot.
     |      
     |      Parameters
     |      ----------
     |      callback
     |          Callable function that accepts 3 arguments
     |      
     |          - this trace
     |          - plotly.callbacks.Points object
     |          - plotly.callbacks.InputDeviceState object
     |      
     |      append : bool
     |          If False (the default), this callback replaces any previously
     |          defined on_click callbacks for this trace. If True,
     |          this callback is appended to the list of any previously defined
     |          callbacks.
     |      
     |      Returns
     |      -------
     |      None
     |      
     |      Examples
     |      --------
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> from plotly.callbacks import Points, InputDeviceState
     |      >>> points, state = Points(), InputDeviceState()
     |      
     |      >>> def click_fn(trace, points, state):
     |      ...     inds = points.point_inds
     |      ...     # Do something
     |      
     |      >>> trace = go.Scatter(x=[1, 2], y=[3, 0])
     |      >>> trace.on_click(click_fn)
     |      
     |      Note: The creation of the `points` and `state` objects is optional,
     |      it's simply a convenience to help the text editor perform completion
     |      on the arguments inside `click_fn`
     |  
     |  on_deselect(self, callback, append=False)
     |      Register function to be called when the user deselects points
     |      in this trace using doubleclick.
     |      
     |      Note: Callbacks will only be triggered when the trace belongs to a
     |      instance of plotly.graph_objs.FigureWidget and it is displayed in an
     |      ipywidget context. Callbacks will not be triggered on figures
     |      that are displayed using plot/iplot.
     |      
     |      Parameters
     |      ----------
     |      callback
     |          Callable function that accepts 3 arguments
     |      
     |          - this trace
     |          - plotly.callbacks.Points object
     |      
     |      append : bool
     |          If False (the default), this callback replaces any previously
     |          defined on_deselect callbacks for this trace. If True,
     |          this callback is appended to the list of any previously defined
     |          callbacks.
     |      
     |      Returns
     |      -------
     |      None
     |      
     |      Examples
     |      --------
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> from plotly.callbacks import Points
     |      >>> points = Points()
     |      
     |      >>> def deselect_fn(trace, points):
     |      ...     inds = points.point_inds
     |      ...     # Do something
     |      
     |      >>> trace = go.Scatter(x=[1, 2], y=[3, 0])
     |      >>> trace.on_deselect(deselect_fn)
     |      
     |      Note: The creation of the `points` object is optional,
     |      it's simply a convenience to help the text editor perform completion
     |      on the `points` arguments inside `selection_fn`
     |  
     |  on_hover(self, callback, append=False)
     |      Register function to be called when the user hovers over one or more
     |      points in this trace
     |      
     |      Note: Callbacks will only be triggered when the trace belongs to a
     |      instance of plotly.graph_objs.FigureWidget and it is displayed in an
     |      ipywidget context. Callbacks will not be triggered on figures
     |      that are displayed using plot/iplot.
     |      
     |      Parameters
     |      ----------
     |      callback
     |          Callable function that accepts 3 arguments
     |      
     |          - this trace
     |          - plotly.callbacks.Points object
     |          - plotly.callbacks.InputDeviceState object
     |      
     |      append : bool
     |          If False (the default), this callback replaces any previously
     |          defined on_hover callbacks for this trace. If True,
     |          this callback is appended to the list of any previously defined
     |          callbacks.
     |      
     |      Returns
     |      -------
     |      None
     |      
     |      Examples
     |      --------
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> from plotly.callbacks import Points, InputDeviceState
     |      >>> points, state = Points(), InputDeviceState()
     |      
     |      >>> def hover_fn(trace, points, state):
     |      ...     inds = points.point_inds
     |      ...     # Do something
     |      
     |      >>> trace = go.Scatter(x=[1, 2], y=[3, 0])
     |      >>> trace.on_hover(hover_fn)
     |      
     |      Note: The creation of the `points` and `state` objects is optional,
     |      it's simply a convenience to help the text editor perform completion
     |      on the arguments inside `hover_fn`
     |  
     |  on_selection(self, callback, append=False)
     |      Register function to be called when the user selects one or more
     |      points in this trace.
     |      
     |      Note: Callbacks will only be triggered when the trace belongs to a
     |      instance of plotly.graph_objs.FigureWidget and it is displayed in an
     |      ipywidget context. Callbacks will not be triggered on figures
     |      that are displayed using plot/iplot.
     |      
     |      Parameters
     |      ----------
     |      callback
     |          Callable function that accepts 4 arguments
     |      
     |          - this trace
     |          - plotly.callbacks.Points object
     |          - plotly.callbacks.BoxSelector or plotly.callbacks.LassoSelector
     |      
     |      append : bool
     |          If False (the default), this callback replaces any previously
     |          defined on_selection callbacks for this trace. If True,
     |          this callback is appended to the list of any previously defined
     |          callbacks.
     |      
     |      Returns
     |      -------
     |      None
     |      
     |      Examples
     |      --------
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> from plotly.callbacks import Points
     |      >>> points = Points()
     |      
     |      >>> def selection_fn(trace, points, selector):
     |      ...     inds = points.point_inds
     |      ...     # Do something
     |      
     |      >>> trace = go.Scatter(x=[1, 2], y=[3, 0])
     |      >>> trace.on_selection(selection_fn)
     |      
     |      Note: The creation of the `points` object is optional,
     |      it's simply a convenience to help the text editor perform completion
     |      on the `points` arguments inside `selection_fn`
     |  
     |  on_unhover(self, callback, append=False)
     |      Register function to be called when the user unhovers away from one
     |      or more points in this trace.
     |      
     |      Note: Callbacks will only be triggered when the trace belongs to a
     |      instance of plotly.graph_objs.FigureWidget and it is displayed in an
     |      ipywidget context. Callbacks will not be triggered on figures
     |      that are displayed using plot/iplot.
     |      
     |      Parameters
     |      ----------
     |      callback
     |          Callable function that accepts 3 arguments
     |      
     |          - this trace
     |          - plotly.callbacks.Points object
     |          - plotly.callbacks.InputDeviceState object
     |      
     |      append : bool
     |          If False (the default), this callback replaces any previously
     |          defined on_unhover callbacks for this trace. If True,
     |          this callback is appended to the list of any previously defined
     |          callbacks.
     |      
     |      Returns
     |      -------
     |      None
     |      
     |      Examples
     |      --------
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> from plotly.callbacks import Points, InputDeviceState
     |      >>> points, state = Points(), InputDeviceState()
     |      
     |      >>> def unhover_fn(trace, points, state):
     |      ...     inds = points.point_inds
     |      ...     # Do something
     |      
     |      >>> trace = go.Scatter(x=[1, 2], y=[3, 0])
     |      >>> trace.on_unhover(unhover_fn)
     |      
     |      Note: The creation of the `points` and `state` objects is optional,
     |      it's simply a convenience to help the text editor perform completion
     |      on the arguments inside `unhover_fn`
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from plotly.basedatatypes.BasePlotlyType:
     |  
     |  __contains__(self, prop)
     |      Determine whether object contains a property or nested property
     |      
     |      Parameters
     |      ----------
     |      prop : str|tuple
     |          If prop is a simple string (e.g. 'foo'), then return true of the
     |          object contains an element named 'foo'
     |      
     |          If prop is a property path string (e.g. 'foo[0].bar'),
     |          then return true if the obejct contains the nested elements for
     |          each entry in the path string (e.g. 'bar' in obj['foo'][0])
     |      
     |          If prop is a property path tuple (e.g. ('foo', 0, 'bar')),
     |          then return true if the object contains the nested elements for
     |          each entry in the path string (e.g. 'bar' in obj['foo'][0])
     |      
     |      Returns
     |      -------
     |      bool
     |  
     |  __eq__(self, other)
     |      Test for equality
     |      
     |      To be considered equal, `other` must have the same type as this object
     |      and their `to_plotly_json` representaitons must be identical.
     |      
     |      Parameters
     |      ----------
     |      other
     |          The object to compare against
     |      
     |      Returns
     |      -------
     |      bool
     |  
     |  __getitem__(self, prop)
     |      Get item or nested item from object
     |      
     |      Parameters
     |      ----------
     |      prop : str|tuple
     |      
     |          If prop is the name of a property of this object, then the
     |          property is returned.
     |      
     |          If prop is a nested property path string (e.g. 'foo[1].bar'),
     |          then a nested property is returned (e.g. obj['foo'][1]['bar'])
     |      
     |          If prop is a path tuple (e.g. ('foo', 1, 'bar')), then a nested
     |          property is returned (e.g. obj['foo'][1]['bar']).
     |      
     |      Returns
     |      -------
     |      Any
     |  
     |  __iter__(self)
     |      Return an iterator over the object's properties
     |  
     |  __reduce__(self)
     |      Custom implementation of reduce is used to support deep copying
     |      and pickling
     |  
     |  __repr__(self)
     |      Customize object representation when displayed in the
     |      terminal/notebook
     |  
     |  __setattr__(self, prop, value)
     |      Parameters
     |      ----------
     |      prop : str
     |          The name of a direct child of this object
     |      value
     |          New property value
     |      Returns
     |      -------
     |      None
     |  
     |  __setitem__(self, prop, value)
     |      Parameters
     |      ----------
     |      prop : str
     |          The name of a direct child of this object
     |      
     |          Note: Setting nested properties using property path string or
     |          property path tuples is not supported.
     |      value
     |          New property value
     |      
     |      Returns
     |      -------
     |      None
     |  
     |  on_change(self, callback, *args, **kwargs)
     |      Register callback function to be called when certain properties or
     |      subproperties of this object are modified.
     |      
     |      Callback will be invoked whenever ANY of these properties is
     |      modified. Furthermore, the callback will only be invoked once even
     |      if multiple properties are modified during the same restyle /
     |      relayout / update operation.
     |      
     |      Parameters
     |      ----------
     |      callback : function
     |          Function that accepts 1 + len(`args`) parameters. First parameter
     |          is this object. Second through last parameters are the
     |          property / subpropery values referenced by args.
     |      args : list[str|tuple[int|str]]
     |          List of property references where each reference may be one of:
     |      
     |            1) A property name string (e.g. 'foo') for direct properties
     |            2) A property path string (e.g. 'foo[0].bar') for
     |               subproperties
     |            3) A property path tuple (e.g. ('foo', 0, 'bar')) for
     |               subproperties
     |      
     |      append : bool
     |          True if callback should be appended to previously registered
     |          callback on the same properties, False if callback should replace
     |          previously registered callbacks on the same properties. Defaults
     |          to False.
     |      
     |      Examples
     |      --------
     |      
     |      Register callback that prints out the range extents of the xaxis and
     |      yaxis whenever either either of them changes.
     |      
     |      >>> import plotly.graph_objects as go
     |      >>> fig = go.Figure(go.Scatter(x=[1, 2], y=[1, 0]))
     |      >>> fig.layout.on_change(
     |      ...   lambda obj, xrange, yrange: print("%s-%s" % (xrange, yrange)),
     |      ...   ('xaxis', 'range'), ('yaxis', 'range'))
     |      
     |      
     |      Returns
     |      -------
     |      None
     |  
     |  pop(self, key, *args)
     |      Remove the value associated with the specified key and return it
     |      
     |      Parameters
     |      ----------
     |      key: str
     |          Property name
     |      dflt
     |          The default value to return if key was not found in object
     |      
     |      Returns
     |      -------
     |      value
     |          The removed value that was previously associated with key
     |      
     |      Raises
     |      ------
     |      KeyError
     |          If key is not in object and no dflt argument specified
     |  
     |  to_plotly_json(self)
     |      Return plotly JSON representation of object as a Python dict
     |      
     |      Returns
     |      -------
     |      dict
     |  
     |  update(self, dict1=None, overwrite=False, **kwargs)
     |      Update the properties of an object with a dict and/or with
     |      keyword arguments.
     |      
     |      This recursively updates the structure of the original
     |      object with the values in the input dict / keyword arguments.
     |      
     |      Parameters
     |      ----------
     |      dict1 : dict
     |          Dictionary of properties to be updated
     |      overwrite: bool
     |          If True, overwrite existing properties. If False, apply updates
     |          to existing properties recursively, preserving existing
     |          properties that are not specified in the update operation.
     |      kwargs :
     |          Keyword/value pair of properties to be updated
     |      
     |      Returns
     |      -------
     |      BasePlotlyType
     |          Updated plotly object
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from plotly.basedatatypes.BasePlotlyType:
     |  
     |  figure
     |      Reference to the top-level Figure or FigureWidget that this object
     |      belongs to. None if the object does not belong to a Figure
     |      
     |      Returns
     |      -------
     |      Union[BaseFigure, None]
     |  
     |  parent
     |      Return the object's parent, or None if the object has no parent
     |      Returns
     |      -------
     |      BasePlotlyType|BaseFigure
     |  
     |  plotly_name
     |      The plotly name of the object
     |      
     |      Returns
     |      -------
     |      str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from plotly.basedatatypes.BasePlotlyType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from plotly.basedatatypes.BasePlotlyType:
     |  
     |  __hash__ = None
    


.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(x=x,y=y,line=dict(color='black',width=2)))
    fig.add_trace(go.Scatter(x=x,y=medicion,mode='lines+markers',line=dict(color='red',width=2,dash='dot'),marker=dict(color='red',symbol='circle-open',size=10)))
    fig.show()




Nombres de ejes y leyendas
~~~~~~~~~~~~~~~~~~~~~~~~~~

Vamos ahora a agregar nombres a los ejes y a las curvas.

Para agregar nombres a las curvas, tenemos que agregar un ``label``, en
este caso en el mismo comando ``plot()``, y luego mostrarlo con
\`legend()

.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(x=x,y=y,name='Teoría',line=dict(color='blue',width=2)))
    fig.add_trace(go.Scatter(x=x,y=medicion,name='Medición',mode='lines+markers',
                             line=dict(color='red',width=2,dash='dot'),
                             marker=dict(color='red',symbol='circle',size=10,line_width=2,line_color="midnightblue")))
    
    
    fig.show()




Para agregar nombres a los ejes usamos ``xlabel`` y ``ylabel``: Los
títulos a la figura se pueden agregar con ``title``:

.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=x
        ,y=y
        ,name='Teoría'
        ,line=dict(
             color='blue'
            ,width=2)
        ))
    fig.add_trace(go.Scatter(
         x=x
        ,y=medicion
        ,name='Medición'
        ,mode='lines+markers'
        ,line=dict(
            color='red'
            ,width=2
            ,dash='dot')
        ,marker=dict(
            color='red'
            ,symbol='circle'
            ,size=10
            ,line_width=2
            ,line_color="midnightblue")))
    
    fig.update_layout(
        title="Resultados",
        xaxis_title="Tiempo [seg]",
        yaxis_title="Valor [mV]",
        legend_title="Referencias",
        font=dict(
            family="Courier New, monospace",
            size=18,
            color="RebeccaPurple"
        ),
        legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.8)
    )
    
    fig.show()




Podemos tambien graficar lineas verticales y horizontales usando
``axvline`` y ``axhline``

.. code:: python

    fig.add_hline(y=1.5)
    fig.add_vline(x=2.5, line_width=3, line_dash="dash", line_color="green")
    fig.show()




Para pasar a escala logarítmica actualizamos los ejes con
``update_xaxes`` o ``update_yaxes``:

.. code:: python

    fig.update_xaxes(type='log')
    
    fig.show()




Dos gráficos en la misma figura
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tenemos que importar el módulo ``subplots``:

.. code:: python

    from plotly.subplots import make_subplots


.. code:: python

    
    fig = go.Figure()
    
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('Resultados escala logarítmica',
                                         'Resultados escala lineal'))
    
    
    fig.add_trace(go.Scatter(
        x=x
        ,y=y
        ,name='Teoría'
        ,line=dict(
             color='blue'
            ,width=2)
        )
        ,row=1,col=1)
    fig.add_trace(go.Scatter(
         x=x
        ,y=medicion
        ,name='Medición'
        ,mode='lines+markers'
        ,line=dict(
            color='red'
            ,width=2
            ,dash='dot')
        ,marker=dict(
            color='red'
            ,symbol='circle'
            ,size=10
            ,line_width=2
            ,line_color="midnightblue"))
        ,row=1,col=1)
    
    fig.add_trace(go.Scatter(
        x=x
        ,y=y
        ,name='Teoría'
        ,line=dict(
             color='blue'
            ,width=2)
        )
        ,row=1,col=2)
    fig.add_trace(go.Scatter(
         x=x
        ,y=medicion
        ,name='Medición'
        ,mode='lines+markers'
        ,line=dict(
            color='red'
            ,width=2
            ,dash='dot')
        ,marker=dict(
            color='red'
            ,symbol='circle'
            ,size=10
            ,line_width=2
            ,line_color="midnightblue"))
        ,row=1,col=2)
    
                        
                        
                        
    fig.update_xaxes(type='log',
                        row=1,col=1)                    
                        
                        
                        





Exportar las figuras
~~~~~~~~~~~~~~~~~~~~

El output sugerido de ``Plotly`` es un archivo ``.html``. > Estos
archivos conservan la interactividad del gráfico!

.. code:: python

    fig.write_html('fig1.html')

`Para obtener un gráfico
estático <https://plotly.com/python/static-image-export/>`__, es
necesario contar con el módulo ``Kaleido`` instalado en la distribución
de python.

``conda install -c conda-forge python-kaleido``

.. code:: python

    fig.write_image('fig1.jpg')

.. code:: python

    %ls


.. parsed-literal::

    00_introd_y_excursion.ipynb     07_modulos_biblioteca.ipynb
    01_1_instala_y_uso.ipynb        08_1_intro_numpy.ipynb
    01_2_introd_python.ipynb        08_2_numpy_arrays.ipynb
    02_1_tipos_y_control.ipynb      09_1_intro_visualizacion.ipynb
    02_2_listas.ipynb               09_2_personal_plot.ipynb
    03_1_tipos_control.ipynb        10_1_mas_arrays.ipynb
    03_2_iteraciones_tipos.ipynb    10_2_indexado.ipynb
    04_1_funciones.ipynb            11_1_intro_scipy.ipynb
    04_2_func_args.ipynb            11_2_scipy_al.ipynb
    04_3_func_func.ipynb            12_1_plotly.ipynb
    05_1_decoradores.ipynb          12_2_imágenes.ipynb
    05_2_inout.ipynb                12_2_plotly3D.ipynb
    05_3_excepciones.ipynb          fig1.html
    06_1_objetos.ipynb              fig1.jpg
    06_2_objetos.ipynb              fig_with_latex.html
    07_control_version.rst          [1m[36mfiguras[m[m/


Acá también se puede utilizar formato tipo LaTeX para parte del texto.
Si utilizamos una expresión encerrada entre los símbolos ``$``,
``Plotly`` interpreta que está escrito en (un subconjunto) de LaTeX.

.. code:: python

    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=x
        ,y=y
        ,name='Teoría'
        ,line=dict(
             color='blue'
            ,width=2)
        ))
    fig.add_trace(go.Scatter(
         x=x
        ,y=medicion
        ,name=r'$f(x) = 2.5 e^{-1.3 x} + 0.5. e^{-1.6 x}$'
        ,mode='lines+markers'
        ,line=dict(
            color='red'
            ,width=2
            ,dash='dot')
        ,marker=dict(
            color='red'
            ,symbol='circle'
            ,size=10
            ,line_width=2
            ,line_color="midnightblue")))
    
    fig.update_layout(
        title="Resultados",
        xaxis_title="Tiempo [seg]",
        yaxis_title="Valor [mV]",
        legend_title="Referencias",
        font=dict(
            family="Times New Roman",
            size=14,
            color="RebeccaPurple"
        ),
        legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.6)
    )
    
    fig.show()




.. code:: python

    fig.write_html("fig_with_latex.html")

Al momento hay un
`bug <https://github.com/plotly/plotly.py/issues/3661>`__ que no muestra
el texto en LaTeX en Visual Studio Code, pero sí funciona usando Jupyter
notebooks en un navegador.

Gráficos en coordenadas polares
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    r = np.arange(0, 2, 0.01)
    theta = 2 * np.pi * r
    
    fig = go.Figure(
        go.Scatterpolar(
            theta = theta,
            r = r,
            thetaunit = 'radians',
            mode = 'markers',
        ))
    fig.update_polars(radialaxis=dict(range=[0, 2]))
    fig.update_polars(angularaxis_thetaunit='radians')
    
    fig.show()




Otros gráficos
~~~~~~~~~~~~~~

.. code:: python

    x = np.array([0,1,2,3,4,5])
    
    fig = go.Figure()
    
    
    fig = make_subplots(rows=1,cols=4,
                       subplot_titles = ('SCATTER','STEP','BAR','FILL BETWEEN'))
    
    fig.add_trace(go.Scatter(
         x=x
        ,y=x + 0.25*np.random.randn(len(x))
        ,name='scatter'
        ,mode='markers'
        ,line=dict(
            color='red'
            ,width=2
            ,dash='dot')
        ,marker=dict(
            color='red'
            ,symbol='circle'
            ,size=10
            ,line_width=2
            ,line_color="midnightblue"))
        ,row=1,col=1)
    
    
    fig.add_trace(go.Scatter(
         x=x
        ,y=x**2
        ,name='step'    
        ,line = dict(shape='hv')
        ,mode='lines')
        ,row=1,col=2)
    
    
    fig.add_trace(go.Bar(
         x=x
        ,y=x**2
        ,name='bar')
        ,row=1,col=3)
    
    
    fig.add_trace(go.Scatter(
         x=x
        ,y=x**2
        ,mode='lines'
        ,fill='tozeroy'
        ,name='fill')
        ,row=1,col=4)





Histogramas
~~~~~~~~~~~

.. code:: python

    n = np.random.randn(10000) #randn devuelve una distribucion normal
    
    fig = go.Figure()
    
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('Histograma','Acumulado'))
    
    fig.add_trace(go.Histogram(x=n),row=1,col=1)
    fig.add_trace(go.Histogram(x=n, cumulative_enabled=True),row=1,col=2)





.. code:: python

    n = np.random.randn(10000) #randn devuelve una distribucion normal
    
    fig = go.Figure()
    
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('Histograma','Acumulado'))
    
    fig.add_trace(go.Histogram(x=n,nbinsx=20,texttemplate="%{x}"),row=1,col=1)
    fig.add_trace(go.Histogram(x=n,nbinsx=20, cumulative_enabled=True),row=1,col=2)
    fig.show()




Ejercicio: Tasa de natalidad en Argentina
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

En el archivo (*../data/tasa-natalidad.csv*) se encuentra una tabla con
la tasa de natalidad en la Argentina, entre los años 2000 y 2018. El
archivo es de tipo ``.csv``, *comma separated values*, es decir que los
datos están separados por comas. El objetivo de este ejercicio es
realizar un gráfico represente estos datos. Para ello

-  Abra el archivo con un editor de texto y familiarícese con su
   estructura, para entender qué datos hay que leer.
-  Abra el archivo con Python y organice la información con ``numpy``.
-  Haga un gráfico claro y bello representando los datos del punto
   anterior.
-  Usando ``numpy``, obtenga las dos provincias de mayor tasa de
   natalidad, y las dos provincias de menor tasa de natalidad en
   promedio entre los años 2000-2018.
-  Haga un gráfico claro y bello representando los datos del punto
   anterior, comparándolos con la tasa de natalidad promedio del país.


Leyendo una imagen
------------------

Además de realizar gráficos 2D, ``Plotly`` permite trabajar con imágenes
(al igual que ``matplotlib``). Se pueden leer imágenes que son
interpretadas como un array de ``numpy`` (al igual que ``matplotlib``).

Usamos un submódulo de ``matplotlib`` para leer la imagen de archivo.
Esto mismo se puede hacer con otros módulos de procesamiento de
imágenes:

.. code:: python

    import matplotlib.image as mpimg
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    import numpy as np
    
    grace = mpimg.imread('../data/grace_hopper.jpg')
    print(grace.shape)
    print(type(grace))
    
    
    jean = mpimg.imread('../data/jean_sammet.jpg')
    print(type(jean))
    
    cirs = mpimg.imread('../data/cirs_slice.png')

Ambas imágenes tienen 3 canales, Rojo, Verde y Azul, que puede verse en
el ``shape`` de cada una de ellas:

.. code:: python

    print(grace.shape)
    print(jean.shape)

.. code:: python

    
    fig = go.Figure()
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('Grace Hopper','Jean Sammet'))
    
    
    fig.add_trace(go.Image(z=grace),1,1)
    fig.add_trace(go.Image(z=jean),1,2)
    fig.show()


Uno de los primeros procesamientos que uno puede hacer de una imagen es
obtener el histograma por cada canal:

.. code:: python

    fig = go.Figure()
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('Jean Sammet','Histograma'))
    
    fig.add_trace(go.Image(z=jean),1,1)
    for channel, color in enumerate(['red', 'green', 'blue']):
        fig.add_trace(go.Histogram(x=jean[..., channel].ravel(), opacity=0.5,
                                   marker_color=color, name='%s channel' %color), 1, 2)
        
    fig.show()    
        


.. code:: python

    ravel_grace = grace.ravel()
    print(ravel_grace.shape)
    print(ravel_grace)

Algo a tener en cuenta es que las imágenes pueden venir definidas como
RGB con enteros entre 0 y 255, como las imágenes anteriores; o entre 0 y
1, como la siguiente:

.. code:: python

    cirs = mpimg.imread('../data/cirs_slice.png')
    print(type(cirs))
    print(cirs.shape)
    print("Max image: ",np.max(cirs))
    #
    #  Puedo normalizar la imagen al rango 0-1
    #
    img_maximo = np.max(cirs)
    cirs = cirs/img_maximo
    #
    #  Normalizo la imagen al rango 0-255
    #
    img_maximo = np.max(cirs)
    cirs = cirs/img_maximo*255
    cirs = cirs.astype(int) # Convierte el array de numpy de float a enteros
    
    fig = go.Figure()
    
    fig = make_subplots(rows=1,cols=2,
                       subplot_titles = ('CIRS','Histograma'))
    
    fig.add_trace(go.Image(z=cirs),1,1)
    fig.add_trace(go.Histogram(x=cirs[..., 0].ravel(), opacity=0.5,
                                   marker_color=color, name='BW channel'), 1, 2)
        
    fig.show()    


.. code:: python

    print(cirs)

También se puede calcular el histograma en ``numpy``:

.. code:: python

    #
    #  Puedo normalizar la imagen al rango 0-1
    #
    img_maximo = np.max(cirs)
    cirs = cirs/img_maximo
    
    
    nbins = 20
    c = cirs.ravel()
    h = np.histogram(c,bins=nbins) # np.histogram devuelve una tupla con dos arrays, el primero
                                # es el histograma, el segundo corresponde a los límites de los bines
    print(type(h[0]))
    print(h[0])
    print(h[0].shape)
    print(h[1].shape)

Pero es más trabajoso hacer el histograma a mano: - Hay que notar la
diferencia en el tamaño entre el histograma en ``h[0]`` y los límites de
los bines en ``h[1]``. Por eso es necesario seleccionar todos los
elementos de ``h[1]`` excepto el último con ``h[1][:-1]``. - Además
usamos ``align='edge'`` para que las barras queden alineadas a la
izquierda de cada intervalo.

Siguiendo con imágenes
----------------------

El paquete ```scikit-image`` <https://scikit-image.org/>`__ que se
instala con

::

   conda install scikit-image

tiene un excelente tutorial para seguir aprendiendo el procesamiento
básico de imágenes, en particular, el tutorial sobre `filtrado de
imágenes <https://scikit-image.org/skimage-tutorials/lectures/1_image_filters.html>`__
y se puede bajar como `un
notebook <https://scikit-image.org/skimage-tutorials/_sources/lectures/1_image_filters.ipynb>`__.
Un poco de graficación 3D
=========================

.. code:: python

    import numpy as np
    import plotly.graph_objects as go

Gráficos y procesamiento sencillo en 2D
---------------------------------------

Histogramas en 2D
~~~~~~~~~~~~~~~~~

Así como trabajamos con histogramas de arrays unidimensionales en forma
sencilla usando ``plt.hist()`` o ``np.histogram()``, podemos hacerlo de
una manera similar trabajando en el plano. Empecemos creando algunos
datos

.. code:: python

    np.random.seed(0)
    n = 10000
    x = np.r_[np.random.normal(size=n), np.random.normal(loc=3, size=n)]
    y = 2.0 + 4.0 * x - x**2 / 5 + 2.0 * np.r_[np.random.normal(size=n), np.random.normal(loc=-3, size=n)]

Acá la notación ``r_[]`` hace concatenación por filas. Veamos que forma
tienen ``x`` e ``y``

.. code:: python

    x.shape

Para crear el histograma usamos simplemente la función ``Histogram2d``.

.. code:: python

    H = go.Figure(go.Histogram2d(
         x = x
        ,y = y))
    H.show()

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,nbinsx = 60
        ,y = y
        ,nbinsy = 60))
    H.show()

Aquí pusimos igual número de “cajas” en cada dimensión. También podemos
pasarle un array con distinto número de cajas

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,nbinsx = 60    
        ,y = y
        ,nbinsy = 150))
    H.show()

Se puede definir el número de bins de esta otra forma:

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,autobinx=False
        ,xbins=dict(start=-5, end=7.5, size=0.5)
        ,y = y
        ,nbinsy = 60))
    H.show()

Por supuesto podemos cambiar el esquema de colores utilizado. Para ello
le damos explícitamente el argumento ``cmap`` especificando el
“colormap” deseado:

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,autobinx=False
        ,xbins=dict(start=-5, end=7.5, size=0.5)
        ,y = y
        ,nbinsy = 60
        ,    colorscale='YlGnBu'
        ))
    H.show()

Se puede elegir el valor máximo de Z:

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,autobinx=False
        ,xbins=dict(start=-5, end=7.5, size=0.5)
        ,y = y
        ,nbinsy = 60
        ,zmax = 200
        ,zauto = False
        ,    colorscale='YlGnBu'
        ))
    H.show()

O por ejemplo, se puede agregar el valor de cada bin:

.. code:: python

    H = go.Figure(go.Histogram2d(
        x = x
        ,nbinsx = 30
        ,y = y
        ,nbinsy = 30
        ,colorscale='YlGnBu'
        ,texttemplate= "%{z}"
        ))
    H.show()

Gráficos de contornos
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    Z,xedges,yedges = np.histogram2d(x,y,bins=20)

.. code:: python

    fig1= go.Figure(data =
         go.Contour(
             x = xedges
            ,y = yedges
            ,z = Z))
    fig1.show()

.. code:: python

    fig1= go.Figure(data =
         go.Contour(
             x = xedges
            ,y = yedges
            ,z = Z
            ,colorscale='rainbow'))
    fig1.show()

.. code:: python

    fig1= go.Figure(data =
         go.Contour(
             x = xedges
            ,y = yedges
            ,z = Z
            ,contours = dict(
                coloring='lines'
                ,showlabels=True
                ,labelfont = dict( 
                    size = 11,
    #                 color = 'white',
                ))
    #          ,line_smoothing=0.5
            ,contours_coloring='heatmap' # can also be 'lines', or 'none'
    
             ))
    fig1.show()

También podemos mostrar la imagen con los contornos superpuestos:

Superficies y contornos
~~~~~~~~~~~~~~~~~~~~~~~

Superficies
^^^^^^^^^^^

Realizar gráficos “realmente” en 3D es tan simple como cambiar
``Contour`` por ``Surface``

.. code:: python

    fig1= go.Figure(data =
         go.Surface(
             x = xedges
            ,y = yedges
            ,z = Z))
    fig1.show()

.. code:: python

    fig1= go.Figure(data =
         go.Surface(
             x = xedges
            ,y = yedges
            ,z = Z
            ,opacity=0.7))
    fig1.show()

.. code:: python

    fig1.write_html('3dplot.html')

Contornos en 3D
^^^^^^^^^^^^^^^

.. code:: python

    fig1= go.Figure(data =
         go.Surface(
             x = xedges
            ,y = yedges
            ,z = Z
            ,contours = {
                "z": {"show": True}
               ,"x": {"show": True, "color": "white"}
             }))
    fig1.show()

.. code:: python

    fig1= go.Figure(data =
         go.Surface(         
             x = xedges
            ,y = yedges
            ,z = Z
            ,contours = {
                "z": {"show": True, "start": 0, "end": 600, "size":50}
               ,"x": {"show": True, "color": "white"}
             }))
    fig1.update_traces(contours_z=dict(show=True, usecolormap=True,
                                      highlightcolor="limegreen", project_z=True))
    fig1.show()

Gráficos de campos vectoriales
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Para realizar gráficos de campos (de velocidades, fuerzas, etc) podemos
utilizar la función ``quiver()``, que grafica flechas en cada punto, con
una dirección y longitud dada

Veamos un ejemplo de la documentación de **Plotly**

.. code:: python

    
    x,y,z,u,v,w = np.loadtxt("https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv",skiprows=1,unpack=True,delimiter=',')
    
    fig = go.Figure(data = go.Cone(
        x=x,
        y=y,
        z=z,
        u=u,
        v=v,
        w=w,
        colorscale='Blues',
        sizemode="absolute",
        sizeref=40))
    
    
    fig.update_layout(scene=dict(aspectratio=dict(x=1, y=1, z=0.8),
                                 camera_eye=dict(x=1.2, y=1.2, z=0.6)))
    
    fig.show()

.. code:: python

    
    # Make the grid
    x = np.arange(0, 1, 0.1)
    y = np.arange(0, 1, 0.1)
    z = np.arange(0, 1, 0.1)
    
    # Make the direction data for the arrows
    u = np.sin(np.pi * x)* np.cos(np.pi * y) * np.cos(np.pi * z)
    v = -np.cos(np.pi * y)* np.sin(np.pi * y) * np.cos(np.pi * z)
    w = (np.sqrt(2.0 / 3.0)* np.sin(np.pi * z)) * np.cos(np.pi * x) * np.cos(np.pi * y) 
         
    
    fig = go.Figure(
            go.Cone(
            x = x
            ,y = y
            ,z = z
            ,u = u
            ,v = v
            ,w = w
            ,sizemode="absolute"
            ,sizeref=2
            ,anchor="tip"
            ))
    fig.show()

`Streamtubes of the ABC Flow: Flowing from
Y-Plane <https://blog.plotly.com/post/178123311802/streamtubes-in-plotly-with-python>`__

.. code:: python

    def vector_field(x, y, z, A=1, B=np.sqrt(2./3), C=np.sqrt(1./3)):
        return A*np.sin(z) + C*np.cos(y), B*np.sin(x) + A*np.cos(z), C*np.sin(y) + B*np.cos(x)

.. code:: python

    x, y, z=np.mgrid[0: 2*np.pi:30j, 0:2*np.pi:30j, 0:2*np.pi:30j]
    u, v, w=vector_field(x, y, z)

.. code:: python

    x.shape
    u.shape

.. code:: python

    fig = go.Figure(
            go.Streamtube(
            x=x.flatten(),
            y=y.flatten(), 
            z=z.flatten(), 
            u=u.flatten(), 
            v=v.flatten(), 
            w=w.flatten(),
                     maxdisplayed=3500,
                     sizeref=0.3,
                     reversescale=True, 
                     showscale=True,
                
            ))
    fig.show()
